// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package notifier

import (
	"sync"
)

var (
	lockNotifierMockSend sync.RWMutex
)

// NotifierMock is a mock implementation of Notifier.
//
//     func TestSomethingThatUsesNotifier(t *testing.T) {
//
//         // make and configure a mocked Notifier
//         mockedNotifier := &NotifierMock{
//             SendFunc: func(vars map[string]string) error {
// 	               panic("TODO: mock out the Send method")
//             },
//         }
//
//         // TODO: use mockedNotifier in code that requires Notifier
//         //       and then make assertions.
//
//     }
type NotifierMock struct {
	// SendFunc mocks the Send method.
	SendFunc func(vars map[string]string) error

	// calls tracks calls to the methods.
	calls struct {
		// Send holds details about calls to the Send method.
		Send []struct {
			// Vars is the vars argument value.
			Vars map[string]string
		}
	}
}

// Send calls SendFunc.
func (mock *NotifierMock) Send(vars map[string]string) error {
	if mock.SendFunc == nil {
		panic("NotifierMock.SendFunc: method is nil but Notifier.Send was just called")
	}
	callInfo := struct {
		Vars map[string]string
	}{
		Vars: vars,
	}
	lockNotifierMockSend.Lock()
	mock.calls.Send = append(mock.calls.Send, callInfo)
	lockNotifierMockSend.Unlock()
	return mock.SendFunc(vars)
}

// SendCalls gets all the calls that were made to Send.
// Check the length with:
//     len(mockedNotifier.SendCalls())
func (mock *NotifierMock) SendCalls() []struct {
	Vars map[string]string
} {
	var calls []struct {
		Vars map[string]string
	}
	lockNotifierMockSend.RLock()
	calls = mock.calls.Send
	lockNotifierMockSend.RUnlock()
	return calls
}
