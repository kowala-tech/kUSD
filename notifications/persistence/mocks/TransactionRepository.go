// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import common "github.com/kowala-tech/kcoin/client/common"
import mock "github.com/stretchr/testify/mock"

import protocolbuffer "github.com/kowala-tech/kcoin/notifications/protocolbuffer"

// TransactionRepository is an autogenerated mock type for the TransactionRepository type
type TransactionRepository struct {
	mock.Mock
}

// GetTxByHash provides a mock function with given fields: hash
func (_m *TransactionRepository) GetTxByHash(hash common.Hash) (*protocolbuffer.Transaction, error) {
	ret := _m.Called(hash)

	var r0 *protocolbuffer.Transaction
	if rf, ok := ret.Get(0).(func(common.Hash) *protocolbuffer.Transaction); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protocolbuffer.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Hash) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTxsFromAccount provides a mock function with given fields: address
func (_m *TransactionRepository) GetTxsFromAccount(address common.Address) ([]*protocolbuffer.Transaction, error) {
	ret := _m.Called(address)

	var r0 []*protocolbuffer.Transaction
	if rf, ok := ret.Get(0).(func(common.Address) []*protocolbuffer.Transaction); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*protocolbuffer.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: tx
func (_m *TransactionRepository) Save(tx *protocolbuffer.Transaction) error {
	ret := _m.Called(tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(*protocolbuffer.Transaction) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
