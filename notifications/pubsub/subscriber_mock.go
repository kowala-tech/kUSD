// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package pubsub

import (
	"sync"
)

var (
	lockSubscriberMockAddHandler sync.RWMutex
	lockSubscriberMockStart      sync.RWMutex
	lockSubscriberMockStop       sync.RWMutex
)

// SubscriberMock is a mock implementation of Subscriber.
//
//     func TestSomethingThatUsesSubscriber(t *testing.T) {
//
//         // make and configure a mocked Subscriber
//         mockedSubscriber := &SubscriberMock{
//             AddHandlerFunc: func(in1 MessageHandler)  {
// 	               panic("TODO: mock out the AddHandler method")
//             },
//             StartFunc: func() error {
// 	               panic("TODO: mock out the Start method")
//             },
//             StopFunc: func()  {
// 	               panic("TODO: mock out the Stop method")
//             },
//         }
//
//         // TODO: use mockedSubscriber in code that requires Subscriber
//         //       and then make assertions.
//
//     }
type SubscriberMock struct {
	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(in1 MessageHandler)

	// StartFunc mocks the Start method.
	StartFunc func() error

	// StopFunc mocks the Stop method.
	StopFunc func()

	// calls tracks calls to the methods.
	calls struct {
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// In1 is the in1 argument value.
			In1 MessageHandler
		}
		// Start holds details about calls to the Start method.
		Start []struct {
		}
		// Stop holds details about calls to the Stop method.
		Stop []struct {
		}
	}
}

// AddHandler calls AddHandlerFunc.
func (mock *SubscriberMock) AddHandler(in1 MessageHandler) {
	if mock.AddHandlerFunc == nil {
		panic("SubscriberMock.AddHandlerFunc: method is nil but Subscriber.AddHandler was just called")
	}
	callInfo := struct {
		In1 MessageHandler
	}{
		In1: in1,
	}
	lockSubscriberMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockSubscriberMockAddHandler.Unlock()
	mock.AddHandlerFunc(in1)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedSubscriber.AddHandlerCalls())
func (mock *SubscriberMock) AddHandlerCalls() []struct {
	In1 MessageHandler
} {
	var calls []struct {
		In1 MessageHandler
	}
	lockSubscriberMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockSubscriberMockAddHandler.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *SubscriberMock) Start() error {
	if mock.StartFunc == nil {
		panic("SubscriberMock.StartFunc: method is nil but Subscriber.Start was just called")
	}
	callInfo := struct {
	}{}
	lockSubscriberMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockSubscriberMockStart.Unlock()
	return mock.StartFunc()
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedSubscriber.StartCalls())
func (mock *SubscriberMock) StartCalls() []struct {
} {
	var calls []struct {
	}
	lockSubscriberMockStart.RLock()
	calls = mock.calls.Start
	lockSubscriberMockStart.RUnlock()
	return calls
}

// Stop calls StopFunc.
func (mock *SubscriberMock) Stop() {
	if mock.StopFunc == nil {
		panic("SubscriberMock.StopFunc: method is nil but Subscriber.Stop was just called")
	}
	callInfo := struct {
	}{}
	lockSubscriberMockStop.Lock()
	mock.calls.Stop = append(mock.calls.Stop, callInfo)
	lockSubscriberMockStop.Unlock()
	mock.StopFunc()
}

// StopCalls gets all the calls that were made to Stop.
// Check the length with:
//     len(mockedSubscriber.StopCalls())
func (mock *SubscriberMock) StopCalls() []struct {
} {
	var calls []struct {
	}
	lockSubscriberMockStop.RLock()
	calls = mock.calls.Stop
	lockSubscriberMockStop.RUnlock()
	return calls
}
