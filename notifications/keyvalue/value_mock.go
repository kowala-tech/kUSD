// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package keyvalue

import (
	"sync"
)

var (
	lockValueMockGetInt64  sync.RWMutex
	lockValueMockGetString sync.RWMutex
	lockValueMockPutInt64  sync.RWMutex
	lockValueMockPutString sync.RWMutex
)

// ValueMock is a mock implementation of Value.
//
//     func TestSomethingThatUsesValue(t *testing.T) {
//
//         // make and configure a mocked Value
//         mockedValue := &ValueMock{
//             GetInt64Func: func() (int64, error) {
// 	               panic("TODO: mock out the GetInt64 method")
//             },
//             GetStringFunc: func() (string, error) {
// 	               panic("TODO: mock out the GetString method")
//             },
//             PutInt64Func: func(value int64) error {
// 	               panic("TODO: mock out the PutInt64 method")
//             },
//             PutStringFunc: func(value string) error {
// 	               panic("TODO: mock out the PutString method")
//             },
//         }
//
//         // TODO: use mockedValue in code that requires Value
//         //       and then make assertions.
//
//     }
type ValueMock struct {
	// GetInt64Func mocks the GetInt64 method.
	GetInt64Func func() (int64, error)

	// GetStringFunc mocks the GetString method.
	GetStringFunc func() (string, error)

	// PutInt64Func mocks the PutInt64 method.
	PutInt64Func func(value int64) error

	// PutStringFunc mocks the PutString method.
	PutStringFunc func(value string) error

	// calls tracks calls to the methods.
	calls struct {
		// GetInt64 holds details about calls to the GetInt64 method.
		GetInt64 []struct {
		}
		// GetString holds details about calls to the GetString method.
		GetString []struct {
		}
		// PutInt64 holds details about calls to the PutInt64 method.
		PutInt64 []struct {
			// Value is the value argument value.
			Value int64
		}
		// PutString holds details about calls to the PutString method.
		PutString []struct {
			// Value is the value argument value.
			Value string
		}
	}
}

// GetInt64 calls GetInt64Func.
func (mock *ValueMock) GetInt64() (int64, error) {
	if mock.GetInt64Func == nil {
		panic("ValueMock.GetInt64Func: method is nil but Value.GetInt64 was just called")
	}
	callInfo := struct {
	}{}
	lockValueMockGetInt64.Lock()
	mock.calls.GetInt64 = append(mock.calls.GetInt64, callInfo)
	lockValueMockGetInt64.Unlock()
	return mock.GetInt64Func()
}

// GetInt64Calls gets all the calls that were made to GetInt64.
// Check the length with:
//     len(mockedValue.GetInt64Calls())
func (mock *ValueMock) GetInt64Calls() []struct {
} {
	var calls []struct {
	}
	lockValueMockGetInt64.RLock()
	calls = mock.calls.GetInt64
	lockValueMockGetInt64.RUnlock()
	return calls
}

// GetString calls GetStringFunc.
func (mock *ValueMock) GetString() (string, error) {
	if mock.GetStringFunc == nil {
		panic("ValueMock.GetStringFunc: method is nil but Value.GetString was just called")
	}
	callInfo := struct {
	}{}
	lockValueMockGetString.Lock()
	mock.calls.GetString = append(mock.calls.GetString, callInfo)
	lockValueMockGetString.Unlock()
	return mock.GetStringFunc()
}

// GetStringCalls gets all the calls that were made to GetString.
// Check the length with:
//     len(mockedValue.GetStringCalls())
func (mock *ValueMock) GetStringCalls() []struct {
} {
	var calls []struct {
	}
	lockValueMockGetString.RLock()
	calls = mock.calls.GetString
	lockValueMockGetString.RUnlock()
	return calls
}

// PutInt64 calls PutInt64Func.
func (mock *ValueMock) PutInt64(value int64) error {
	if mock.PutInt64Func == nil {
		panic("ValueMock.PutInt64Func: method is nil but Value.PutInt64 was just called")
	}
	callInfo := struct {
		Value int64
	}{
		Value: value,
	}
	lockValueMockPutInt64.Lock()
	mock.calls.PutInt64 = append(mock.calls.PutInt64, callInfo)
	lockValueMockPutInt64.Unlock()
	return mock.PutInt64Func(value)
}

// PutInt64Calls gets all the calls that were made to PutInt64.
// Check the length with:
//     len(mockedValue.PutInt64Calls())
func (mock *ValueMock) PutInt64Calls() []struct {
	Value int64
} {
	var calls []struct {
		Value int64
	}
	lockValueMockPutInt64.RLock()
	calls = mock.calls.PutInt64
	lockValueMockPutInt64.RUnlock()
	return calls
}

// PutString calls PutStringFunc.
func (mock *ValueMock) PutString(value string) error {
	if mock.PutStringFunc == nil {
		panic("ValueMock.PutStringFunc: method is nil but Value.PutString was just called")
	}
	callInfo := struct {
		Value string
	}{
		Value: value,
	}
	lockValueMockPutString.Lock()
	mock.calls.PutString = append(mock.calls.PutString, callInfo)
	lockValueMockPutString.Unlock()
	return mock.PutStringFunc(value)
}

// PutStringCalls gets all the calls that were made to PutString.
// Check the length with:
//     len(mockedValue.PutStringCalls())
func (mock *ValueMock) PutStringCalls() []struct {
	Value string
} {
	var calls []struct {
		Value string
	}
	lockValueMockPutString.RLock()
	calls = mock.calls.PutString
	lockValueMockPutString.RUnlock()
	return calls
}
