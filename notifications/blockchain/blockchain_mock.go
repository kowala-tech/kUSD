// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package blockchain

import (
	"math/big"
	"sync"
)

var (
	lockBlockchainMockOnBlock sync.RWMutex
	lockBlockchainMockSeek    sync.RWMutex
	lockBlockchainMockStart   sync.RWMutex
	lockBlockchainMockStop    sync.RWMutex
)

// BlockchainMock is a mock implementation of Blockchain.
//
//     func TestSomethingThatUsesBlockchain(t *testing.T) {
//
//         // make and configure a mocked Blockchain
//         mockedBlockchain := &BlockchainMock{
//             OnBlockFunc: func(in1 BlockHandler) error {
// 	               panic("TODO: mock out the OnBlock method")
//             },
//             SeekFunc: func(in1 *big.Int) error {
// 	               panic("TODO: mock out the Seek method")
//             },
//             StartFunc: func() error {
// 	               panic("TODO: mock out the Start method")
//             },
//             StopFunc: func()  {
// 	               panic("TODO: mock out the Stop method")
//             },
//         }
//
//         // TODO: use mockedBlockchain in code that requires Blockchain
//         //       and then make assertions.
//
//     }
type BlockchainMock struct {
	// OnBlockFunc mocks the OnBlock method.
	OnBlockFunc func(in1 BlockHandler) error

	// SeekFunc mocks the Seek method.
	SeekFunc func(in1 *big.Int) error

	// StartFunc mocks the Start method.
	StartFunc func() error

	// StopFunc mocks the Stop method.
	StopFunc func()

	// calls tracks calls to the methods.
	calls struct {
		// OnBlock holds details about calls to the OnBlock method.
		OnBlock []struct {
			// In1 is the in1 argument value.
			In1 BlockHandler
		}
		// Seek holds details about calls to the Seek method.
		Seek []struct {
			// In1 is the in1 argument value.
			In1 *big.Int
		}
		// Start holds details about calls to the Start method.
		Start []struct {
		}
		// Stop holds details about calls to the Stop method.
		Stop []struct {
		}
	}
}

// OnBlock calls OnBlockFunc.
func (mock *BlockchainMock) OnBlock(in1 BlockHandler) error {
	if mock.OnBlockFunc == nil {
		panic("BlockchainMock.OnBlockFunc: method is nil but Blockchain.OnBlock was just called")
	}
	callInfo := struct {
		In1 BlockHandler
	}{
		In1: in1,
	}
	lockBlockchainMockOnBlock.Lock()
	mock.calls.OnBlock = append(mock.calls.OnBlock, callInfo)
	lockBlockchainMockOnBlock.Unlock()
	return mock.OnBlockFunc(in1)
}

// OnBlockCalls gets all the calls that were made to OnBlock.
// Check the length with:
//     len(mockedBlockchain.OnBlockCalls())
func (mock *BlockchainMock) OnBlockCalls() []struct {
	In1 BlockHandler
} {
	var calls []struct {
		In1 BlockHandler
	}
	lockBlockchainMockOnBlock.RLock()
	calls = mock.calls.OnBlock
	lockBlockchainMockOnBlock.RUnlock()
	return calls
}

// Seek calls SeekFunc.
func (mock *BlockchainMock) Seek(in1 *big.Int) error {
	if mock.SeekFunc == nil {
		panic("BlockchainMock.SeekFunc: method is nil but Blockchain.Seek was just called")
	}
	callInfo := struct {
		In1 *big.Int
	}{
		In1: in1,
	}
	lockBlockchainMockSeek.Lock()
	mock.calls.Seek = append(mock.calls.Seek, callInfo)
	lockBlockchainMockSeek.Unlock()
	return mock.SeekFunc(in1)
}

// SeekCalls gets all the calls that were made to Seek.
// Check the length with:
//     len(mockedBlockchain.SeekCalls())
func (mock *BlockchainMock) SeekCalls() []struct {
	In1 *big.Int
} {
	var calls []struct {
		In1 *big.Int
	}
	lockBlockchainMockSeek.RLock()
	calls = mock.calls.Seek
	lockBlockchainMockSeek.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *BlockchainMock) Start() error {
	if mock.StartFunc == nil {
		panic("BlockchainMock.StartFunc: method is nil but Blockchain.Start was just called")
	}
	callInfo := struct {
	}{}
	lockBlockchainMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockBlockchainMockStart.Unlock()
	return mock.StartFunc()
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedBlockchain.StartCalls())
func (mock *BlockchainMock) StartCalls() []struct {
} {
	var calls []struct {
	}
	lockBlockchainMockStart.RLock()
	calls = mock.calls.Start
	lockBlockchainMockStart.RUnlock()
	return calls
}

// Stop calls StopFunc.
func (mock *BlockchainMock) Stop() {
	if mock.StopFunc == nil {
		panic("BlockchainMock.StopFunc: method is nil but Blockchain.Stop was just called")
	}
	callInfo := struct {
	}{}
	lockBlockchainMockStop.Lock()
	mock.calls.Stop = append(mock.calls.Stop, callInfo)
	lockBlockchainMockStop.Unlock()
	mock.StopFunc()
}

// StopCalls gets all the calls that were made to Stop.
// Check the length with:
//     len(mockedBlockchain.StopCalls())
func (mock *BlockchainMock) StopCalls() []struct {
} {
	var calls []struct {
	}
	lockBlockchainMockStop.RLock()
	calls = mock.calls.Stop
	lockBlockchainMockStop.RUnlock()
	return calls
}
