// Code generated by go-bindata. DO NOT EDIT.
// sources:
// index.html (6.724kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x6d\x8f\xdb\x36\xf2\x7f\xed\xfd\x14\x13\xb5\x45\x6c\xd4\x7a\xb2\xd7\xbb\x5e\x47\x72\x91\xff\x26\xff\x22\x87\xf6\x1a\xa0\x29\xda\x7b\xd5\xd0\xd2\xc8\x62\x96\x22\x55\x92\xb6\xb3\x17\xec\x77\x3f\x90\xa2\x64\xf9\x61\x93\xb4\x29\x70\xf7\x26\x11\x87\xf3\x9b\x19\x72\x1e\xe9\x4d\x9e\xbc\xf8\xe9\xf6\xcd\xbf\x5e\xbf\x84\x52\x57\x6c\x79\x91\x98\xff\x80\x11\xbe\x4e\x3d\xe4\xde\xf2\x62\x90\x94\x48\xf2\xe5\xc5\x60\x90\x54\xa8\x09\x64\x25\x91\x0a\x75\xea\x6d\x74\xe1\xcf\xbd\xfd\x46\xa9\x75\xed\xe3\x1f\x1b\xba\x4d\xbd\xdf\xfc\x5f\x9e\xfb\xb7\xa2\xaa\x89\xa6\x2b\x86\x1e\x64\x82\x6b\xe4\x3a\xf5\x5e\xbd\x4c\x31\x5f\x63\x0f\xc7\x49\x85\xa9\xb7\xa5\xb8\xab\x85\xd4\x3d\xd6\x1d\xcd\x75\x99\xe6\xb8\xa5\x19\xfa\x76\x31\x06\xca\xa9\xa6\x84\xf9\x2a\x23\x0c\xd3\xd8\x5b\x5e\x18\x39\x9a\x6a\x86\xcb\xbb\x4c\x50\x0e\xb7\x82\x6b\x29\x18\xbc\x26\x1c\x59\x12\x36\x5b\x96\x8b\x51\x7e\x07\xa5\xc4\x22\xf5\x8c\xad\x6a\x11\x86\x59\xce\xdf\xa9\x20\x63\x62\x93\x17\x8c\x48\x0c\x32\x51\x85\xe4\x1d\x79\x1f\x32\xba\x52\xa1\xde\x51\xad\x51\xfa\x2b\x21\xb4\xd2\x92\xd4\xe1\x34\x98\x06\xd7\x61\xa6\x54\xd8\xd1\x82\x8a\xf2\x20\x53\xca\x03\x89\x2c\xf5\x94\xbe\x67\xa8\x4a\x44\xed\x41\xb8\xfc\x6b\x7a\x0b\xc1\xb5\x4f\x76\xa8\x44\x85\xe1\x65\x70\x1d\x44\x56\x65\x9f\xfc\x57\xb4\x1a\xbc\x0a\xd6\x42\xac\x19\x92\x9a\x2a\xab\x35\x53\xea\xbb\x82\x54\x94\xdd\xa7\x3f\x9a\x7d\x94\x92\xe8\xc5\x24\x8a\xc6\xd3\x28\x1a\x5f\x46\xd1\x78\x16\x45\xe3\xab\x28\x3a\xaf\xc9\xa8\x52\x99\xa4\xb5\x06\x25\xb3\xcf\x3e\xe1\xbb\x3f\x36\x28\xef\xc3\x69\x10\x07\xb1\x5b\xd8\x13\xbd\x53\xde\x32\x09\x1b\x81\xcb\x2f\x92\xed\x73\xa1\xef\xc3\x49\x70\x19\xc4\x61\x4d\xb2\x3b\xb2\xc6\xbc\xd5\x64\xb6\x82\x96\xf8\xb7\xe9\x7d\x2c\x5a\xde\x1d\x07\xcb\xdf\xa1\xac\x12\x15\x72\x1d\xbc\x53\xe1\x24\x88\xe7\x41\xd4\x12\x4e\xe5\x5b\x05\xc6\x69\x46\xd5\xa0\x8c\xc7\x50\x4e\xc6\x50\x4e\xe1\x83\x59\x0f\x6c\x50\x35\x01\xb0\x80\x7d\x04\x3c\xdb\x6f\xee\x90\xae\x4b\xbd\x80\x49\x14\x59\xea\x83\xf9\x87\x34\xe8\x4c\x30\x21\x17\xf0\x55\x5c\x44\xd3\x69\x7e\x06\x74\x79\x00\x5a\x94\x62\x8b\xf2\x10\x3a\x8b\xe3\x7c\x1e\x7f\x0a\x1a\x6c\x51\x6a\x9a\x11\xe6\x67\xc8\x35\x4a\x67\x7d\x45\xb9\x5f\x3a\xfe\x38\x8a\xbe\x79\x76\x8e\xba\x2d\x1b\x72\x4e\x55\xcd\xc8\xfd\x02\x0a\x86\xef\x1b\x12\x61\x74\xcd\x7d\xaa\xb1\x52\x0b\x68\x24\x37\x1b\x2b\x92\xdd\xad\xa5\xd8\xf0\xdc\x3f\x77\xc6\x96\x56\x14\xc5\xb3\xbf\x78\x8d\x3d\x15\xe6\x16\xa6\x71\x36\x9f\xc1\x13\x5a\x99\x2a\x48\x78\x83\x04\xe8\x33\xf9\x95\xf8\xb7\xcf\x28\x47\x22\xfd\xb5\x24\x39\x45\xae\x87\x5a\xd4\xe3\x0e\x1e\x7d\x63\xbe\xaf\xe3\xd5\xfc\x12\xe2\x4b\xb3\xb8\xba\x8c\x6f\xe6\x11\x4c\xed\xce\x35\x89\x67\xd7\x04\x2e\xaf\xcc\xe2\x66\x1e\x47\xd7\x31\x5c\x4d\xcc\x62\x85\x11\xb9\x9a\xc1\xf5\x8d\x59\x60\x1e\x4d\x66\x73\xb8\xb1\x6c\xc5\x4d\x14\xcd\x2e\xed\xe5\x8e\x3e\x61\xde\x0e\x57\x77\x54\xff\x0f\x5b\x78\x6a\x19\xac\x84\xd6\xa2\xfa\x2f\xda\x57\x50\xa6\x51\x2e\xa0\x96\x62\x4d\xf3\xc5\x8b\xdf\x5e\x55\x64\x8d\x6f\x24\xe1\xaa\x10\xb2\x0a\x7e\xa4\x99\x14\x4a\x14\x3a\xe8\xcc\x06\xa5\x89\xd4\xb7\x26\x04\x95\x96\xe9\x53\x67\xfb\xd3\x31\x20\xcf\x7b\xe4\x46\xf1\xd3\xf1\xf7\x0e\xf8\xe6\xbe\xc6\x34\x82\x51\x2f\xab\x8c\x56\x89\x4a\xb9\x74\xaa\x85\xa2\x9a\x0a\xbe\x30\xb5\x9e\x68\xba\xc5\x73\xbc\xaa\x26\xfc\x04\x40\x56\x4a\xb0\x8d\xc6\xa3\x54\x5b\x31\x91\xdd\x35\x34\xdb\xc2\xfb\x69\xea\x92\x68\x57\x52\x07\x03\xab\x08\x6a\x89\x4e\x3c\xd4\x24\xcf\x29\x5f\x2f\xe0\xaa\x76\x19\x0b\x15\x91\x6b\xca\x17\x10\xed\x21\x49\xd8\x16\xb8\x24\x6c\xa6\x95\x8b\x41\xb2\x12\xf9\xbd\xad\xae\x39\xdd\x42\xc6\x88\x52\xa9\x77\x54\x44\xec\x14\x72\xc0\x60\x86\x0f\x42\x79\xbb\x75\xb0\x27\xc5\xce\x03\xab\x28\xf5\x1a\x23\xfc\x26\x7a\x16\x10\x1b\xf3\x1c\xe4\x48\x1e\xf3\xd9\xda\x8f\x27\xed\xe6\x20\x29\xe3\x56\x88\xc6\xf7\xda\xb7\x15\xa8\xab\x3d\xa6\x70\xd3\xf3\x93\x4c\x19\xb7\xf2\xc3\x9c\x6e\x9d\x79\xbd\xcf\x8f\x5b\xaa\x45\xbd\x80\xe9\xe4\x23\x66\xaa\xca\x9f\x79\xcb\x84\xb6\xb4\x82\x40\x41\xfc\x9c\x68\xb2\x22\x0a\x3d\x20\x92\x12\xbf\xa4\x79\x8e\x3c\xf5\xb4\xdc\x60\x63\x2b\x24\x36\x1c\x68\x6e\xa4\x50\x6e\x79\x4d\xf7\xa9\x09\x5f\x42\x4b\xe9\xd9\x79\x4e\xef\xf4\xcb\xf4\xda\x18\xdb\x2b\xb5\x4b\x75\x7a\x4b\xcd\x77\x29\xc3\xf6\xb3\xa0\xc8\x72\x85\xba\x35\x8c\xe1\x1a\x79\xbe\xfc\x91\x72\x0d\x5a\xdc\x21\x57\x49\xe8\x68\x2d\x07\x59\x21\x83\x42\xc8\xd4\x5b\x9b\x4e\xc6\x85\xfc\x9d\x64\x99\xd8\x70\xed\x2d\xbf\x77\x14\x70\x94\x05\x24\xa1\x05\xb4\x68\x85\x0c\x33\x0d\xda\xa4\xa1\x75\xbe\xe7\x86\xdf\x13\x59\xf6\x58\xa7\x1a\xda\x10\x12\xb5\xc9\x39\xd8\x12\xb6\xc1\xd4\x8b\xde\x17\xf3\xab\x18\xe3\xc8\x54\xaa\xd9\x84\x5c\x4e\x8a\x9b\x6c\x36\xb9\x26\x97\x53\xb2\xba\xbe\xce\xa6\xd1\x34\x42\x9c\x64\xf3\xc2\x5b\x7e\x3e\x6f\x12\x36\x5a\x1e\x55\x7a\x9d\xe7\x97\xd3\xe8\x7a\xb6\x9a\xdf\x64\xf1\xe4\x66\x95\xe5\x93\x2c\x23\x31\x4e\xf2\xab\x79\x44\xae\x8a\x69\x31\x8d\x56\xb3\xfc\xc6\x28\xfd\x5c\xde\x23\xa5\x49\xd8\x5c\x99\x73\xd8\x20\x31\x15\xb1\x33\xa8\xe7\x8c\x8a\x72\xfd\x3b\xc9\x73\x53\x9e\xbc\xe5\xf3\xe6\xe3\xf8\xfe\x07\x09\xe5\xf5\xe6\xdc\xfd\x1f\xc0\xed\xdd\x1f\x50\xc2\xc7\x55\x56\x8d\x63\x9e\x57\xe7\x1c\xfe\x29\x85\xd5\xde\xd7\x7d\xc2\xe3\xea\x36\x9c\x6a\x6f\xf9\x0b\xa7\x7a\x71\xac\xe9\xd1\xd8\xda\x03\xf7\x8a\x1a\x39\x0e\x7a\xec\xd9\x78\xee\x2d\xab\x37\x26\xfc\x8f\x43\xe0\x24\x06\x5a\x46\xd8\x21\x3d\x89\x97\xce\x77\x6e\xbd\xda\x68\x2d\x9a\x84\xad\xa5\xa8\x85\x42\x93\x68\x94\xaf\xbd\xe5\xeb\x66\x9d\x84\x0d\x4f\xe7\xfd\xc6\xdd\x6e\xb5\x4f\xdc\x41\xa2\xc9\xca\xcd\xb3\x76\xd5\xbe\x50\xdd\x52\x76\xdf\x66\x6f\xf9\xea\x45\x12\xea\xf2\x90\xe6\x42\xe4\xcc\x86\xf5\xc1\x29\xfd\x67\x4d\xf4\xe6\x1c\x7f\x66\x0e\x7d\xb8\x91\x84\x7b\x13\xcc\x46\xcf\xba\x44\x9b\xb6\xd4\x79\xe2\x07\xaa\x7a\x69\x1d\xea\xb6\x67\x35\xab\xfd\x21\x93\xf0\xa0\x56\x75\xb5\x6d\x5f\xd9\x92\xfd\x73\x62\xb0\x25\x12\x14\xca\xad\x99\x65\xcd\x3a\x0c\xe1\x05\x16\x94\x23\x10\xa8\x50\x97\x22\x07\x2d\x40\x62\x26\x38\x37\x41\xb3\xa9\x05\x77\x00\x60\x42\xa9\x56\xc6\x9e\x23\x85\x62\xc3\xed\x49\x87\x23\xd7\x9a\x1d\x7f\x0a\x1c\x77\xf0\x2b\xae\x7e\x16\xd9\x1d\xea\xe1\x70\xb8\xa3\x3c\x17\xbb\x80\x89\x8c\x18\x80\x19\x1b\xb4\xc8\x04\x83\x34\x4d\xc1\x3d\x6f\xbc\x11\x7c\x07\xde\x4e\x99\x87\x8e\x07\x0b\xf3\x69\xbe\x46\xf0\x2d\x1c\xc3\x4b\xa1\x34\x7c\x0b\x5e\x48\x6a\xea\x8d\x9a\x03\x39\xe5\x81\xe0\x15\x2a\x45\xd6\xd8\x37\x10\xb7\xc8\x75\x6b\xa5\x3d\x47\xa5\xd6\x90\xc2\x3f\x7e\xfe\xe9\x9f\x41\x4d\xa4\xc2\x86\x25\x30\x2d\xa6\x99\x85\x06\x03\x5a\xc0\xd0\xb2\xa5\x29\xf0\x0d\x63\x1d\x7e\x20\x51\x6f\x24\x77\x6c\x0f\x17\x07\xec\x81\x6d\x35\xf0\x24\x4d\x61\xc3\x73\x7b\xc5\xf9\x1e\xf9\xf5\xd0\xfb\xaa\x69\x4d\xa3\xc0\x64\xe4\x1e\x31\xea\xc4\x1d\x48\x6b\xbb\xe5\xc7\x04\x76\x3d\xb6\x27\xb3\xa5\x3d\x22\xb6\x0d\xb4\xc7\xc4\x66\x82\x2b\x0d\xcc\x70\xa4\x60\x74\x74\x91\xd9\x0a\x1c\xf4\xc5\x04\x85\x90\x2f\x49\x56\x0e\xf7\x37\xce\xb5\xbc\xdf\xcb\x73\x02\x91\x1d\x89\xf3\xbd\x6f\x2d\x67\x40\xf3\x4e\xb0\x35\x12\x59\xc0\x90\xaf\x75\x09\x4b\x88\x7a\x72\x9a\x4d\x0b\xc9\x04\x2f\xa8\xac\x30\x87\x27\x29\x20\x0b\x4a\xa2\x6e\xcd\xb8\x30\xf4\xba\x1d\x6f\xd4\x87\x0e\x90\x05\x12\x6b\x46\x32\xfc\x95\xea\x72\x58\x35\xb5\xc6\xd8\xf1\x92\xa1\x79\x2a\xbf\xd2\x58\x39\xd3\x47\x1d\xec\xa1\xfd\x7a\x00\x64\x0a\x7b\x02\xcd\xfd\x04\xa4\xae\x91\xe7\x9f\x29\xac\x95\xf5\x30\xfa\x32\xff\xa1\x94\x42\x3e\xe6\x3c\x2e\xf4\xfd\xf0\x03\x23\xf7\x62\xa3\x17\xf0\x54\x8b\xfa\xd6\x4e\x92\x4f\xc7\x60\xe4\x2f\xa0\x93\x30\xb6\xcd\x61\x01\x4f\xed\xca\xec\xd3\x0a\x2d\x6a\x16\x45\xd1\x18\xda\xf1\xfe\xff\x88\x5c\x80\x99\xb3\x1e\x1e\xb1\x47\x6d\xb2\xcc\x3c\x03\xbe\xc4\x22\x27\xa3\xb3\xc9\xad\xff\xbc\x55\x0f\x87\xf5\x20\x63\x42\xe1\x51\xb9\x02\x85\xfa\x4d\x23\x75\xd8\x95\xb4\x31\x4c\xa3\x28\x1a\x3d\x83\x87\xfd\x0b\x27\x0c\xe1\xa5\x32\x55\x97\xaa\x12\x08\xec\x70\xa5\x6c\x51\x03\x87\x31\xad\x4f\x0b\xd0\x25\xc2\xf3\xd7\xaf\x5c\xc5\xbc\xb0\x35\xc2\x71\x0c\x5d\x81\x32\x9e\x3e\x6a\x72\xa3\x20\x63\x34\xbb\xeb\x65\x4d\x7b\x65\x18\xd4\xd2\x56\xa4\x17\x58\x90\x0d\xb3\x42\xf6\x69\xd4\x4e\x81\x2e\x99\x4e\x86\xc2\x51\xb0\x25\xec\x10\xd2\x1f\x5e\x7a\x39\xd8\xcd\x33\x8f\x42\x6c\xef\x3b\x40\x54\x1f\xd5\x61\xe6\x88\x3e\xbb\x9d\x2b\x0e\x98\x9d\x63\x94\xc9\x1a\x5b\x80\x95\x96\x94\xaf\x69\x71\x3f\x74\xf1\x42\xb2\xe6\xfd\x68\xfb\xa1\x37\x6e\x88\xed\x29\xdd\xb2\x6f\xfd\x01\xc9\x9a\xd7\xa7\x18\x0b\x9a\xb8\x18\xb9\x67\xee\xc8\x3a\xa4\xbd\x75\xf8\x68\xea\xc2\x87\xde\x09\x39\xee\x5e\x36\x25\xec\x6d\xa2\xe5\x41\xcb\xf6\xbf\xfe\xd0\x56\xb2\x07\xf3\xee\xd0\x72\xf9\x76\xd4\x83\x16\x52\x54\xbf\x22\x35\x97\xef\xea\x97\xbb\xda\x10\xe2\x20\xc2\x78\x3e\x0a\xb4\xf8\x7f\xfa\x1e\xf3\xe1\xa4\xb1\x6f\x60\xb5\xb5\xf5\xe5\x6d\xa2\xf3\x65\x4f\x47\x12\xea\xbc\xd5\xf0\x38\xa3\x16\x9f\x64\x6c\x0d\x7b\x80\x61\x8b\x6a\x2c\x7b\x18\xf5\xa1\x67\xea\x6e\x97\xdf\xa7\x62\x6f\x5b\x9e\xbe\x88\x33\x7c\xfd\xed\xc3\xf2\x7a\xca\xfb\x1a\xb9\x79\xf7\xb7\x90\x8b\x5e\x5f\x71\x26\xfd\x40\xf9\x9d\xf3\x0e\x71\xbf\x73\x7f\x65\x7c\x41\x96\x6f\x5d\x69\xf5\x9c\x61\xde\xa8\x83\xb7\xc0\xe3\x5c\x1c\x1d\xf6\xc2\x3f\x95\x73\x9f\x13\xe4\xbd\x30\x77\x56\xfc\xde\x0f\xf7\x93\x80\x1f\x0c\x68\xbe\x80\xd6\xff\xe3\xae\x91\x74\xb5\x6f\xd4\xbf\x11\x9d\x37\x86\x76\x97\xdc\x9e\x58\xe7\xed\xa5\xf6\xce\x7e\xce\x3f\x3a\x1f\xf5\xaa\x69\x33\xf2\x34\x09\xd0\x55\xc7\xde\x0f\xd6\x49\xd8\xcc\xa9\x49\xd8\xfc\xcd\xe8\x3f\x01\x00\x00\xff\xff\xf6\xd6\x00\xd3\x44\x1a\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2d, 0xbe, 0x7d, 0x9d, 0x2e, 0x4, 0xdb, 0x37, 0xf4, 0xb6, 0x5, 0xa1, 0xd6, 0x92, 0x4, 0xb5, 0x33, 0x7, 0x1e, 0xa, 0x75, 0x91, 0x52, 0x17, 0x2c, 0x5e, 0xed, 0xb5, 0x1a, 0x6b, 0x1d, 0xc3}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": {indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
