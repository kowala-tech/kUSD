// Code generated by go-bindata. DO NOT EDIT.
// sources:
// static/index.html (2.849kB)
// static/scripts.js (5.73kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x5b\x8f\xdb\x36\x13\x7d\xf6\xfe\x0a\x46\x1f\x82\x7c\x01\x2c\x89\xf2\x7d\x15\xcb\x4d\xb1\x09\x8a\x3c\x04\xcd\x43\x0a\xa4\x8f\x23\x6a\x24\xd1\xa6\x48\x85\x1c\xdb\x71\x8b\xfe\xf7\x82\x92\x76\xd7\x7b\x69\x53\x6c\x53\xb4\x4f\xf6\x9c\x99\x33\x67\x34\xbc\x0c\xd7\xcf\xde\xfc\x78\xf5\xf1\xe7\x0f\x6f\x59\x4d\x8d\xda\x5c\xac\xfd\x0f\x53\xa0\xab\x2c\x40\x1d\x6c\x2e\x46\xeb\x1a\xa1\xd8\x5c\x8c\x46\xeb\x06\x09\x98\xa8\xc1\x3a\xa4\x2c\xd8\x53\x19\xae\x82\x5b\x47\x4d\xd4\x86\xf8\x79\x2f\x0f\x59\xf0\x29\xfc\xe9\xfb\xf0\xca\x34\x2d\x90\xcc\x15\x06\x4c\x18\x4d\xa8\x29\x0b\xde\xbd\xcd\xb0\xa8\xf0\x8c\xa7\xa1\xc1\x2c\x38\x48\x3c\xb6\xc6\xd2\x59\xe8\x51\x16\x54\x67\x05\x1e\xa4\xc0\xb0\x33\xc6\x4c\x6a\x49\x12\x54\xe8\x04\x28\xcc\x92\x60\x73\xe1\xf3\x90\x24\x85\x9b\x9d\x30\x52\xb3\x2b\xa3\xc9\x1a\xc5\x3e\x80\x46\xb5\x8e\x7b\x57\x17\xa5\xa4\xde\xb1\xda\x62\x99\x05\xbe\x56\x97\xc6\xb1\x28\xf4\xd6\x45\x42\x99\x7d\x51\x2a\xb0\x18\x09\xd3\xc4\xb0\x85\x2f\xb1\x92\xb9\x8b\xe9\x28\x89\xd0\x86\xb9\x31\xe4\xc8\x42\x1b\x4f\xa3\x69\xb4\x8c\x85\x73\xf1\x0d\x16\x35\x52\x47\xc2\xb9\x80\x59\x54\x59\xe0\xe8\xa4\xd0\xd5\x88\x14\xb0\x78\xf3\x34\xdd\xd2\x68\x0a\xe1\x88\xce\x34\x18\xcf\xa2\x65\xc4\x3b\xc9\x73\xf8\x29\xaa\x9e\xef\xa2\xca\x98\x4a\x21\xb4\xd2\x75\xaa\xc2\xb9\xef\x4a\x68\xa4\x3a\x65\xef\xbd\x1f\xad\x05\x4a\x27\x9c\x8f\xa7\x9c\x8f\x67\x9c\x8f\xe7\x9c\x8f\x17\x9c\x3f\xae\xe4\xa5\x9c\xb0\xb2\x25\xe6\xac\xf8\xcb\x5f\xb8\xfd\xbc\x47\x7b\x8a\xa7\x51\x12\x25\x83\xd1\x7d\xd1\xd6\x05\x9b\x75\xdc\x27\xdc\xfc\xad\xdc\xa1\x36\x74\x8a\x27\xd1\x2c\x4a\xe2\x16\xc4\x0e\x2a\x2c\xae\x95\xbc\x2b\xba\x06\xbf\x99\xee\x1f\xed\x96\xed\xfd\xcd\xf2\x2d\xc4\x1a\xd3\xa0\xa6\x68\xeb\xe2\x49\x94\xac\x22\x7e\x0d\x3c\xcc\xdf\x09\xf8\x45\xf3\x52\xa3\x3a\x19\xb3\x7a\x32\x66\xf5\x94\xfd\xea\xed\x51\xb7\xa9\xfa\x0d\x90\xb2\xdb\x1d\xf0\xea\xd6\x79\x44\x59\xd5\x94\xb2\x09\xe7\x1d\xfa\x5b\x9f\x67\xe0\x37\x60\x2b\xa9\xc3\xdc\x10\x99\x26\x65\xc9\xa2\xfd\xd2\x73\x09\xbf\x50\x08\x4a\x56\x3a\x65\x02\x35\xa1\xbd\x65\x43\xcf\x15\x46\x19\x9b\xb2\xff\x25\x25\x9f\x4e\x8b\x47\x24\x67\xe7\x92\x90\xd6\xe6\x80\xf6\x2e\x75\x9e\x24\xc5\x2a\xf9\x1a\x35\x72\xfb\xa6\x01\x7b\xba\x5b\x33\x99\x36\x65\xd3\xc9\x50\x70\x1f\x78\x40\x4b\x52\x80\x0a\xfb\x92\xaf\x09\x52\x87\xf5\x90\x38\xe1\xfc\xf9\xab\xc7\xd0\x43\xdd\xc3\x85\x74\xad\x82\x53\xca\x4a\x85\x43\x2f\xba\x36\x84\x92\xb0\x71\x77\x9a\x31\xca\x41\xec\x2a\x6b\xf6\xba\x08\x1f\x6b\xc6\x35\x56\x96\xe5\xab\x27\xae\xd6\x99\x84\x6f\xd7\x34\x11\xab\x39\x7b\x26\x1b\x7f\xd9\x82\xee\x99\x8c\x9d\x07\x85\x8d\xf9\x25\x54\x52\x23\xd8\xb0\xb2\x50\x48\xd4\xf4\x7f\x32\xed\xf8\x86\xce\x9f\xfb\xff\xcb\x24\x5f\xcd\x58\x32\xf3\xc6\x62\x96\x5c\xae\x38\x9b\x76\x9e\x25\x24\xf3\x25\xb0\xd9\xc2\x1b\x97\xab\x84\x2f\x13\xb6\x98\x78\x23\x47\x0e\x8b\x39\x5b\x5e\x7a\x03\x0b\x3e\x99\xaf\xd8\x65\x17\x56\x5e\x72\x3e\x9f\x75\xcd\x7d\xf9\x95\xf2\x8e\x98\xef\x24\xfd\x87\x2b\x7c\x58\x19\xeb\x8f\xc7\xbf\x58\x5f\x29\x15\xa1\x4d\x59\x6b\x4d\x25\x8b\xf4\xcd\xa7\x77\x0d\x54\xf8\xd1\x82\x76\xa5\xb1\x4d\xf4\x5e\x0a\x6b\x9c\x29\x29\xba\x29\x9b\x39\x02\x4b\x57\x7e\x0b\x3a\xb2\xd9\x8b\xa1\xf6\x17\x63\x86\xba\x38\x83\x7b\xe1\x17\xe3\x1f\x06\xe2\xc7\x53\x8b\x19\x67\x2f\xcf\x4e\x95\x57\xb5\xe8\xdc\x70\x9c\x5a\xe3\x24\x49\xa3\x53\x3f\x52\x80\xe4\x01\x1f\x8b\x75\x2d\xe8\x07\x04\xc8\x9d\x51\x7b\xc2\x7b\x47\x2d\x57\x46\xec\x7a\xac\x7b\x29\x9c\x1f\xd3\xe1\x10\x1d\x6b\x39\xd0\x58\x27\xc4\x5a\x8b\x43\x7a\xd6\x42\x51\x48\x5d\xa5\xec\xe6\xf6\x62\xfd\x1d\x91\x32\x7e\x4b\x59\xc7\xd7\xf7\xe8\x3a\xee\x1f\x45\x17\xa3\x75\x6e\x8a\x53\x77\x89\x17\xf2\xc0\x84\x02\xe7\xb2\xe0\xde\x25\x12\x30\x59\x64\x81\xe8\x1f\x26\xfd\xcb\x27\x2e\xe4\xe1\xce\xf0\x24\xdf\xb4\x00\xda\x56\x49\x01\xfe\x53\xe3\x2d\x1c\xa0\x77\x06\x77\x27\xc3\x5e\xb7\xbb\xaa\x1b\x07\x16\x41\xd0\xeb\x64\x11\xf1\x88\xc7\xfb\xa6\xe8\x01\xdf\xc1\x62\x2f\x7c\x92\x3f\x1d\x37\x4f\x97\x0c\x0b\xd3\x3c\x90\xf5\xe0\x3f\x2a\x9d\x43\x8e\x2a\x74\x04\xba\x00\x65\x34\xbe\x5e\x44\x93\x45\xc4\x7b\xfc\xb1\xa1\x77\xae\xe5\xa7\x51\x1f\x39\xe4\x1f\x42\xdd\xfd\x1a\xd7\x71\xbf\xa2\xeb\xb8\x7f\x10\xff\x1e\x00\x00\xff\xff\x57\x04\x7b\xef\x21\x0b\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc6, 0x89, 0x35, 0xd8, 0xb5, 0xeb, 0x84, 0xcb, 0x7, 0x49, 0xa8, 0x20, 0x6a, 0x50, 0xf0, 0x76, 0xc2, 0xc, 0xee, 0x2b, 0x40, 0xef, 0x5f, 0xce, 0xc4, 0x9e, 0x36, 0xb0, 0x17, 0xe6, 0x52, 0xea}}
	return a, nil
}

var _staticScriptsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x61\x8f\xe3\xb6\x11\xfd\xee\x5f\x31\x51\x81\x5b\x19\xd9\x95\xbc\x09\x02\x04\x5e\x4b\xc5\x65\x37\x2d\x52\xf4\x9a\x43\x2e\x41\x3e\x1c\x0e\x07\x5a\x1a\xdb\xc4\x4a\xa4\x40\x52\xeb\x33\x1c\xfd\xf7\x82\x14\x29\x91\xb6\xec\x6c\xd1\x7c\x33\xc9\xe1\xe3\x70\xf8\xf8\xf8\xe4\xa2\x22\x52\xc2\x3b\xca\xd4\xbf\xa9\x54\x3f\x32\x25\x0e\x80\x5f\x14\xb2\x52\xc2\x2f\x48\x0a\x95\x3c\xf2\xba\xe1\x0c\x99\x82\xe3\x0c\xa0\xe0\x4c\x2a\xd1\x16\x8a\x8b\xb8\x11\xbc\x91\x73\xd3\x0d\x20\xdb\x06\x5d\xd7\x83\xe9\x51\x3b\x2a\x13\xce\x1e\x39\xdb\x50\x51\x43\x76\xd2\x91\xac\x29\x2b\x63\xdd\x67\xe2\xbb\x19\x80\x40\x56\xa2\x88\x1d\xa4\x40\xd5\x0a\x06\xb1\x69\x00\xac\x94\xc8\xed\x4f\xdd\x28\xf3\xa3\x01\x34\x4b\x26\xa8\x33\x4f\x68\xd9\xad\x52\x55\xfe\x59\x98\xe2\x53\x61\xf1\x59\x1c\xa9\x79\xcb\x14\xa4\x70\x9f\x2c\xf0\xfe\xfb\x79\xa2\xf8\x3f\xe8\x17\x2c\xe3\x6f\xe6\x1d\xc4\xe7\xb8\x7d\x7c\x37\x7f\x4d\x0e\x45\x5f\x05\x2c\xe1\xef\x10\x3d\xba\x46\x04\x4b\x88\xde\x23\x2b\x29\xdb\x46\x13\x49\x0e\x0d\x80\xe3\x57\x57\x30\xdf\xbc\xf1\x22\x01\x56\x04\x76\x02\x37\x59\xf4\xb7\x08\x38\x7b\xac\x68\xf1\x9c\x1d\xc3\xe3\xe8\x72\xfb\x63\x95\x12\x7f\x99\x6e\x5c\x3f\xc8\x66\x36\x74\xda\x53\x19\x4e\x71\x80\x8c\xd1\x9d\x24\x26\x8d\xc0\x17\x64\xea\x09\x37\xa4\xad\x54\x3c\x1f\x19\xd2\x6f\x40\x22\x2b\x9f\x88\x22\xf1\xd1\x02\x93\x42\x51\xce\x96\x10\xd9\x4d\x7d\xae\x29\x53\xd1\xad\x1d\xdd\xf2\x17\x14\x8c\x8b\xa5\x8f\xe1\x3a\x5d\x10\x2d\x83\x61\x47\x91\x7e\xb8\x9b\x9b\x74\xbb\xd9\x6c\xbc\x02\x94\x6d\xff\x0a\xf2\x8f\x7b\x93\x8a\x28\x84\x0c\x8e\x67\x69\x47\xc3\x56\x48\x59\x0a\x94\x32\xe8\x32\x3c\xf2\x7b\x5a\x46\x75\xfb\xfe\x7b\xdb\xd3\x8d\x6b\xec\x08\x2b\x2b\xfc\xa7\x45\x7e\xdc\x11\xb6\x45\x77\xd9\xa6\xc6\x4e\xee\x5d\x80\xf2\xb6\xcf\x65\x0a\x24\x18\xba\x8a\x61\x92\x9f\x84\xf0\x46\xae\x21\xfc\xc6\xe8\xe4\xfc\xb1\xff\xda\xec\xf7\x82\x37\x5c\xa2\x3e\xcf\x70\xba\x37\x70\xa6\x3d\xe6\x70\xed\x51\xff\x4e\xab\xea\x17\x2c\x90\xbe\x98\x29\x32\x66\xf8\x45\xbd\xf7\x8f\x9b\x6e\x20\x1e\xcf\x77\xe0\x1d\x64\x19\x44\x11\xbc\x79\x03\xc3\x8c\x84\x14\x85\xde\xb4\x4c\x2a\x64\x5b\xb5\x83\x1c\x16\xf3\x81\x0e\x3d\x06\xaa\x0f\x1a\x26\x3e\x7a\xf4\x38\x07\xf8\xb8\xf8\x04\x9d\xdd\x6d\xe7\x72\xfe\x13\xc1\xdc\x50\xac\x4a\x89\xca\xd3\x90\x0a\xb7\xc8\xca\xdc\x54\x47\xf1\x67\x64\x72\x95\xda\x3e\x2f\x88\xac\xb1\x82\x0d\x17\x59\xe4\x52\xfa\x6c\xf3\x88\x72\xc7\x26\xb0\x3d\x4b\x58\xa5\x66\x42\x3e\x1b\x11\x24\x56\x58\x28\x50\x87\x06\xb3\x48\xe1\x17\x65\x74\xc7\x9c\x9d\x15\x9e\x29\x6a\x76\xf0\x42\xaa\xd6\x45\x84\xc5\xed\x02\xed\xf3\xae\xf5\x50\xe1\x9a\x34\x71\x6c\x5b\x73\xc8\xf2\xa1\x0e\x36\x27\xde\x68\x45\x81\x67\x3c\x64\x47\x1b\x36\x2c\xe8\xda\xf9\xf0\x6b\x95\xf6\xf1\xfe\xb2\xf3\xb9\xaf\x86\xfd\x1e\xfd\x5d\x6f\xb8\xa8\x81\xb3\x0f\xed\xba\xa6\x2a\xd8\xa7\xc7\xbd\x60\x23\x7e\xa9\xb5\xc0\x7d\xb6\x6a\x10\xe5\x6f\x9d\x2c\x0c\xd5\xf5\x66\x51\xd6\xb4\x61\x75\x69\x79\x02\x30\x5d\xef\xe0\x16\x4f\x95\xdb\x4e\xef\xd2\xeb\x59\xd6\x3d\x17\xde\xd6\x27\x0c\x78\x65\x8e\xfd\xf4\x0b\x29\x7a\x2a\x31\x99\x61\xff\xc8\x5e\x4f\x50\xeb\x65\x94\x6b\xc1\x58\x4e\xe5\x36\x41\xcf\x21\x39\x33\x75\x3a\xb5\x51\x80\xa6\x12\xd3\x13\x83\xc3\x1d\x39\xd7\x07\x6b\xf9\xce\xeb\x5f\xf5\xad\x9b\x62\xd7\x59\xf8\xc2\x45\xc3\x1e\xe9\xd4\x8c\x91\x83\x5e\xdf\xba\x55\x8a\xb3\xdc\x32\x6e\x95\xda\xb6\x47\x5c\x4d\x53\x9f\xb6\x3b\x91\xfa\x4d\x45\xd6\x15\x06\x90\x6a\x87\xa4\x3c\x49\xd5\x37\x63\x43\x58\xfe\xd3\xd3\x2a\x55\xbb\xa9\x11\xcb\xbc\x8b\xc3\xe6\x54\x2f\x8d\x6a\x81\x6c\x2f\xcf\x35\x56\x61\x62\x78\x34\x27\x43\xfb\x74\x27\x2b\xb5\xe6\xe5\x21\x9c\x16\x38\xc1\xda\x5a\xe3\x3f\xfe\xf8\xf8\x69\xde\x6b\x8c\x31\x12\x13\x0a\x03\xb0\x0a\x8d\xb4\x91\x9a\xc1\x99\x82\xf9\x65\x3b\xba\x41\xec\xa7\xd5\x0e\x9c\x21\xca\x8e\x13\x2e\xa9\x83\x34\x4c\xd9\x57\x26\xb3\xcf\x70\x57\xab\x34\x38\xd4\x55\x1a\xbe\x0c\x73\xeb\xdc\xa6\x34\x79\x34\x71\x27\xaf\xd5\xf8\x58\x61\xa2\x88\xd8\xa2\x4a\x0c\x6f\xbb\x10\x2d\x50\x9c\x8b\x60\x83\x09\xba\x8e\xe5\x49\xc3\x65\x28\xab\x49\x57\x91\xc6\x9b\x7c\x11\xa7\xb7\x5c\x93\x28\x03\x8c\x27\xeb\xd7\xcc\xee\xc3\xeb\xdd\xee\x35\x97\x1b\x52\xc4\x05\xf9\xaa\x1f\x04\xda\xbe\x30\xce\x16\xe7\x4c\x4f\x83\xa8\x7e\xeb\x27\xd2\x36\xe9\x9a\xdf\x36\xcd\x5f\xfa\xb9\x78\x6a\x98\xdd\xe3\xbe\x84\x8f\x9f\x5c\x8a\x05\xa7\x6c\x4d\x24\xfa\xfe\x78\x5d\xf1\xe2\x79\x09\x0b\xeb\x8e\xcf\x4d\xdd\x13\x2d\xdf\x69\xa4\x38\x38\x6d\x81\x05\x67\x0c\x8b\xfe\x83\x44\xd3\xe3\xd4\x08\xfe\xc6\xea\xf3\x69\x7b\x99\x14\x15\x97\x18\x9c\xec\x5e\x42\x06\x2d\x2b\x71\x43\x19\x96\x0f\xa3\x45\x1b\x96\x08\x21\x20\x03\x86\x7b\xf8\x1d\xd7\x1f\x78\xf1\x8c\x2a\x8e\xe3\x3d\x65\x25\xdf\x27\x15\x2f\x88\xa6\x83\x26\x8b\xe2\x05\xaf\x20\xd3\xce\x72\xa7\x54\x23\x97\xd1\x5c\x7f\x30\xee\xa5\x5c\xa6\xa9\xf9\x5a\xdc\x9b\x5f\x73\xf8\x1a\x4e\xa7\xef\xb8\x54\xf0\x35\x44\x29\x69\x68\x14\xa6\x9a\x70\x66\x76\x00\x19\xc4\x46\xc9\x5c\xc1\x25\xaa\x5f\x69\x8d\xbc\x55\x71\x58\xa1\x5b\xf8\x76\xb1\x58\x38\x03\x7a\x0a\x56\xa3\x94\x64\xf4\xeb\x9c\xfd\x2e\xdf\xf5\x5d\x9e\xd5\x76\x25\xf1\x46\x63\x73\x51\x5c\x65\x5e\x88\x80\x5a\x6e\x21\x83\x7f\x7d\xf8\xf9\x3f\x49\x43\x84\xb4\x11\x49\x49\x14\xb1\x8b\x6b\xf7\x6d\xa2\xb2\x0c\x58\x5b\x55\xa3\x9f\xee\xfd\xaf\xf3\xc8\x7e\x70\x62\x08\x02\x5f\x65\xde\x11\x5d\xf4\xe1\x96\x4c\xc3\x34\xdf\x76\x8f\x88\x8e\x86\xaf\x04\x1d\x59\xeb\x4f\x9e\x86\x76\xac\x7f\x25\xf4\x78\x49\xfc\xc9\xd3\xd0\xee\x39\x7b\x25\xb4\x0b\xef\xa1\x5d\x6b\x1a\x1a\x85\xe0\xe2\x12\x2e\xe3\xea\x10\x1f\x2b\x72\xe0\xad\x5a\xc2\x8d\xe2\xcd\x23\x32\x85\xe2\xe6\x16\xb4\xff\xea\xf1\x0d\xc2\xad\xb1\x65\x4b\xb8\x31\x2d\x3d\xde\xf3\x71\x09\xdf\x2d\x16\x8b\x5b\x68\x04\xdf\x6a\x5d\xfb\x81\x68\x5d\x14\xed\x85\x1a\xca\xb6\x28\x50\x5e\x2c\xe1\xab\xf2\xb1\x18\x43\x46\xb6\xfd\x3f\xe6\x64\x98\x38\x28\xbe\x21\xf2\x89\x98\xe8\xc1\xd8\x50\x5e\x2a\x41\xd9\x96\x6e\x0e\x7d\xdc\xfc\xe1\x95\x5f\x7a\x25\x7d\x01\xa3\xc8\x59\x54\x70\xa6\x08\x65\x28\x22\xef\xfd\xf7\xc6\x05\xdf\x47\x81\x03\x0a\xe6\x56\x77\xd5\xf6\xee\xfe\x9b\xe8\xc4\x48\xed\xee\xf3\x67\xcd\x59\x78\xe4\x4c\x09\x5e\xc1\x7b\xc2\xb0\x5a\xa5\xbb\xfb\xd0\x5f\x95\xf4\xc5\x77\x1d\x61\x33\x4c\x02\x64\x5b\xd7\x44\x1c\xae\x26\x23\xeb\xbb\xef\xa2\x7c\x45\x5d\xdf\x86\xc0\x86\xdc\xe9\xda\xe8\xdb\x13\x01\x11\x94\xdc\xed\x68\x59\x22\xcb\x22\x5d\xf8\x28\x5f\xa5\x34\x07\xdf\x53\x0d\x77\x6d\x78\x39\x4e\x12\x9b\x5c\xf6\xdb\xff\x77\xd9\x5e\x3a\xfa\x97\x49\x4e\x57\xe6\xa2\x05\x77\x7f\x46\xb9\xbb\x1c\x7e\x00\xb9\x0b\x0e\xee\x3e\x06\xc3\xc3\x25\x3d\xb5\x90\xae\xe9\x29\xb2\xe7\x23\xbd\x0c\x87\x37\xde\xbc\xe8\x4f\x3f\xbf\x4b\x2c\xfb\x66\x00\x2b\xfd\xe2\xa7\xb9\x7e\x67\x4b\x5e\xb4\xb5\xd6\xe6\x2d\xaa\x1f\x2b\xd4\x3f\x7f\x38\xfc\x54\xc6\x37\x45\xcf\x91\x9b\xf9\x6c\xfe\x30\x9b\xfd\x37\x00\x00\xff\xff\x49\x8b\xd5\x31\x62\x16\x00\x00")

func staticScriptsJsBytes() ([]byte, error) {
	return bindataRead(
		_staticScriptsJs,
		"static/scripts.js",
	)
}

func staticScriptsJs() (*asset, error) {
	bytes, err := staticScriptsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/scripts.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa2, 0x76, 0x9e, 0x3d, 0x82, 0x17, 0xf1, 0x35, 0x2, 0x7e, 0x2b, 0x21, 0xf2, 0x7c, 0x51, 0xaf, 0x8f, 0xe5, 0x4, 0x97, 0x4e, 0x99, 0xaa, 0xab, 0xe, 0x3d, 0x12, 0xed, 0xca, 0x87, 0xc9, 0x13}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,

	"static/scripts.js": staticScriptsJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": {nil, map[string]*bintree{
		"index.html": {staticIndexHtml, map[string]*bintree{}},
		"scripts.js": {staticScriptsJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
