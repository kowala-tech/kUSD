// Code generated by go-bindata. DO NOT EDIT.
// sources:
// index.html (5.436kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xeb\x8f\xdb\x36\x12\xff\xec\xfd\x2b\x26\xca\x15\xeb\x45\xad\x97\xdf\x56\x24\x17\xb9\x4d\x50\xe4\x80\x5c\x03\x24\xc5\xf5\x3e\x15\x94\x34\xb2\xb8\x2b\x91\x2a\x39\xb6\xb3\x57\xec\xff\x7e\xa0\x1e\x7e\x6f\x92\x26\xc5\x5d\xf3\x21\xab\x79\xfe\x86\xe4\xcc\x70\xe8\xf0\xd9\xab\x9f\x6e\x3f\xfc\xfb\xdd\x6b\xc8\xa9\x2c\x96\x57\xa1\xf9\x03\x05\x13\xab\xc8\x42\x61\x2d\xaf\x7a\x61\x8e\x2c\x5d\x5e\xf5\x7a\x61\x89\xc4\x20\xc9\x99\xd2\x48\x91\xb5\xa6\xcc\x9e\x5b\x7b\x41\x4e\x54\xd9\xf8\xdb\x9a\x6f\x22\xeb\x17\xfb\xe7\x97\xf6\xad\x2c\x2b\x46\x3c\x2e\xd0\x82\x44\x0a\x42\x41\x91\xf5\xe6\x75\x84\xe9\x0a\x0f\xec\x04\x2b\x31\xb2\x36\x1c\xb7\x95\x54\x74\xa0\xba\xe5\x29\xe5\x51\x8a\x1b\x9e\xa0\x5d\x13\x03\xe0\x82\x13\x67\x85\xad\x13\x56\x60\xe4\x5b\xcb\x2b\xe3\x87\x38\x15\xb8\xbc\x4f\x24\x17\x70\x2b\x05\x29\x59\xc0\x3b\x26\xb0\x08\xdd\x46\x54\x6b\x15\x5c\xdc\x43\xae\x30\x8b\x2c\x13\xab\x0e\x5c\x37\x49\xc5\x9d\x76\x92\x42\xae\xd3\xac\x60\x0a\x9d\x44\x96\x2e\xbb\x63\x1f\xdd\x82\xc7\xda\xa5\x2d\x27\x42\x65\xc7\x52\x92\x26\xc5\x2a\x77\xe4\x8c\x9c\x99\x9b\x68\xed\xee\x78\x4e\xc9\x85\x93\x68\x6d\x81\xc2\x22\xb2\x34\x3d\x14\xa8\x73\x44\xb2\xc0\x5d\x7e\x1d\x6e\x26\x05\xd9\x6c\x8b\x5a\x96\xe8\x8e\x9d\x99\xe3\xd5\x90\x87\xec\xaf\x41\x35\xf6\xda\x59\x49\xb9\x2a\x90\x55\x5c\xd7\xa8\x89\xd6\x3f\x64\xac\xe4\xc5\x43\xf4\xd6\xc8\x51\x29\x46\xc1\xd0\xf3\x06\x23\xcf\x1b\x8c\x3d\x6f\x30\xf1\xbc\xc1\xd4\xf3\x2e\x23\x19\x28\x9d\x28\x5e\x11\x68\x95\x7c\xf1\x0a\xef\x7e\x5b\xa3\x7a\x70\x47\x8e\xef\xf8\x2d\x51\xaf\xe8\x4e\x5b\xcb\xd0\x6d\x1c\x2e\xbf\xc9\xb7\x2d\x24\x3d\xb8\x43\x67\xec\xf8\x6e\xc5\x92\x7b\xb6\xc2\xb4\x43\x32\x22\xa7\x63\xfe\x69\xb8\x4f\x65\xcb\xdd\x69\xb2\xfc\x19\x60\xa5\x2c\x51\x90\x73\xa7\xdd\xa1\xe3\xcf\x1d\xaf\x63\x9c\xfb\xaf\x01\xcc\xa1\x19\xa8\x5e\xee\x0f\x20\x1f\x0e\x20\x1f\xc1\xef\x86\xee\xd5\x49\xd5\x24\x40\x00\xfb\x0c\x78\xb1\x17\x6e\x91\xaf\x72\x0a\x60\xe8\x79\x35\xf7\xd1\xfc\xc7\x1a\xeb\x44\x16\x52\x05\xf0\xdc\xcf\xbc\xd1\x28\xbd\x60\x34\x3e\x32\x0a\x72\xb9\x41\x75\x6c\x3a\xf1\xfd\x74\xee\x7f\xce\xd4\xd9\xa0\x22\x9e\xb0\xc2\x4e\x50\x10\xaa\x36\xfa\x92\x0b\x3b\x6f\xf5\x7d\xcf\xfb\xee\xc5\x25\xee\x26\x6f\xd8\x29\xd7\x55\xc1\x1e\x02\xc8\x0a\xfc\xd8\xb0\x58\xc1\x57\xc2\xe6\x84\xa5\x0e\xa0\xf1\xdc\x08\x62\x96\xdc\xaf\x94\x5c\x8b\xd4\xbe\xb4\xc6\x8e\x97\x65\xd9\x8b\xaf\xdc\xc6\x03\x08\xb3\x0b\x23\x3f\x99\x4f\xe0\x19\x2f\x4d\x17\x64\xa2\xb1\x04\x38\x54\xb2\x4b\xf9\x1f\xbb\xe0\x02\x99\xb2\x57\x8a\xa5\x1c\x05\xf5\x49\x56\x83\x9d\xb9\xf7\x9d\xf9\x9e\xf9\xf1\x7c\x0c\xfe\xd8\x10\xd3\xb1\xbf\x98\x7b\x30\xaa\x25\x33\xe6\x4f\x66\x0c\xc6\x53\x43\x2c\xe6\xbe\x37\xf3\x61\x3a\x34\x44\x8c\x1e\x9b\x4e\x60\xb6\x30\x04\xa6\xde\x70\x32\x87\x45\xad\x96\x2d\x3c\x6f\x32\xae\x37\xf7\xe6\x33\xe1\x6d\x31\xbe\xe7\xf4\x17\x8e\xf0\x3c\x32\x88\x25\x91\x2c\xff\x8f\xf1\x65\xbc\x20\x54\x01\x54\x4a\xae\x78\x1a\xbc\xfa\xe5\x4d\xc9\x56\xf8\x41\x31\xa1\x33\xa9\x4a\xe7\x2d\x4f\x94\xd4\x32\x23\x67\x17\x36\x68\x62\x8a\x6e\x4d\x0a\x6a\x52\xd1\x75\x1b\xfb\xf5\x00\x50\xa4\x07\xec\x06\xf8\x7a\xf0\x63\x6b\xf8\xe1\xa1\xc2\xc8\x83\x9b\x83\xaa\x32\xa8\x0a\xb5\x6e\xcb\xa9\x92\x9a\x13\x97\x22\x30\xbd\x9e\x11\xdf\xe0\x25\x5d\x5d\x31\x71\x66\xc0\x62\x2d\x8b\x35\xe1\x49\xa9\xc5\x85\x4c\xee\x1b\x5e\x7d\x85\x1f\x96\x69\x5b\x44\xdb\x9c\xb7\x66\x50\x03\x41\xa5\xb0\x75\x0f\x15\x4b\x53\x2e\x56\x01\x4c\xab\xb6\x62\xa1\x64\x6a\xc5\x45\x00\xde\xde\x24\x74\xbb\x06\x17\xba\xcd\xb4\x72\xd5\x0b\x63\x99\x3e\xd4\xdd\x35\xe5\x1b\x48\x0a\xa6\x75\x64\x9d\x34\x91\x7a\x0a\x39\x52\x30\xc3\x07\xe3\xa2\x13\x1d\xc9\x94\xdc\x5a\x50\x03\x45\x56\x13\x84\xdd\x64\x4f\x00\xbe\x09\xaf\x35\x39\xf1\x57\xd8\xc5\xca\xf6\x87\x9d\xb0\x17\xe6\x7e\xe7\x84\xf0\x23\xd9\x75\x07\xda\xf5\x1e\xd3\xb8\xf9\xe5\x49\x26\xf7\x3b\xff\x6e\xca\x37\x6d\x78\x07\x9f\x9f\x8e\x94\x64\x15\xc0\x68\xf8\x89\x30\x75\x69\x4f\xac\x65\xc8\x3b\x5e\xc6\x20\x63\x76\xca\x88\xc5\x4c\xa3\x05\x4c\x71\x66\xe7\x3c\x4d\x51\x44\x16\xa9\x35\x36\xb1\x42\x58\xa7\x03\x4f\x8d\x17\x2e\x6a\x5d\x73\xfb\x54\x4c\x2c\xa1\xe3\x1c\xc4\x79\x09\x77\xf4\x6d\xb8\x75\x8e\xed\x41\x6b\x52\x9f\xef\x52\xf3\x9d\x2b\xb7\xfb\xcc\x38\x16\xa9\x46\xea\x02\x2b\x70\x85\x22\x5d\xbe\xe5\x82\x80\xe4\x3d\x0a\x1d\xba\x2d\xaf\xd3\x60\x31\x16\x90\x49\x15\x59\x2b\x73\x93\x09\xa9\x7e\x65\x49\x22\xd7\x82\xac\xe5\x8f\x2d\x07\x5a\x4e\x00\xa1\x5b\x1b\x74\xd6\x1a\x0b\x4c\x08\xc8\x94\x61\x7d\xf8\x56\x3b\xfc\x9e\xf9\xaa\x97\x75\x8e\xd0\xa5\x90\xac\x4c\xcd\xc1\x86\x15\x6b\x8c\x2c\xef\x63\x1c\xc7\xd3\x45\x3a\x66\xd9\x64\x31\xc7\xf9\x74\x3e\x9b\x0c\xd3\xd8\x8b\x47\xe3\x79\xe2\xcf\x26\x6c\xc2\x3c\x7f\xe1\xc7\xe3\xa9\xb5\xfc\x72\xdd\xd0\x6d\x50\x9e\x04\x1d\x8e\x87\x8b\x6c\xcc\xd8\x24\xc9\x16\xe9\x70\x94\x21\xf3\x16\x53\x7f\x36\xf7\xb2\x2c\x1e\x67\xd9\x7c\xe1\x4f\xd9\x70\xca\x3c\x03\xfa\xa5\xba\x27\xa0\xa1\xdb\x6c\x59\x7b\x60\xbd\xd0\x74\xc4\x5d\x40\x07\x87\x51\x72\x41\xbf\xb2\x34\x35\xed\xc9\x5a\xbe\x6c\x3e\x4e\xf7\xbf\x17\x72\x51\xad\x2f\xed\xff\x91\x79\xbd\xf7\x47\x1c\xf7\x69\xc8\xb2\x39\x98\x97\xe5\xa5\x03\xff\x1c\x60\xb9\x3f\xeb\x43\xc6\xd3\x70\x6b\xc1\xc9\x5a\xfe\x2c\x38\x05\xa7\x48\x4f\xe6\xd6\xde\x70\x0f\xd4\xf8\x69\x4d\x4f\x4f\xd6\x9f\x5b\xcb\xf2\x83\x49\xff\xd3\x14\x38\xd3\xec\x14\x61\x8b\xfc\x2c\x5f\x76\x67\xd7\xd2\xf1\x9a\x48\x8a\x5d\x10\xd6\xf2\x9d\x92\x95\x34\xbd\xa1\x91\xec\xce\xbc\x39\xe4\x96\xda\x97\x6b\x2f\x24\x16\xb7\x53\x6c\x4d\x75\xef\xd2\x96\x54\xbb\x6f\x23\x5b\xbe\x79\x15\xba\x94\x1f\xf3\xda\xc4\xb8\x20\xa8\x77\xfe\x9c\xff\x9e\x18\xad\x2f\xe9\x27\x66\xa9\xc7\x82\xd0\xdd\x87\x60\x04\x07\xd1\x85\xd4\x5d\x46\x17\x82\xed\x85\x94\x2e\xfd\xd0\xa5\xf4\x84\xf7\x47\x6a\xf5\xcc\xd8\x77\x3c\x0f\xfa\xbe\x77\xf6\xef\xe6\x82\xb2\x79\xa9\x17\x48\x98\x5e\x90\x1d\xb3\x0e\x17\xf9\x3f\x59\xc7\xd0\x19\x79\xd0\x1f\x8e\xbe\x68\x1d\xef\x50\x98\x69\xe1\xd2\x2a\x58\xfb\x16\x7e\x6e\x2d\x6f\xa5\xc8\xb8\x2a\x43\x97\x7d\x62\x71\xa1\x7b\x78\x66\xa1\x7b\x90\x7b\xa1\x7b\x74\x71\xec\x2e\x9a\xfd\x35\x13\xee\xdf\x76\xbd\x0d\x53\xa0\x51\x6d\xcc\xc3\xc2\xd0\xae\x0b\xaf\x30\xe3\x02\x81\x41\x89\x94\xcb\x14\x48\x82\xc2\x44\x0a\x61\x2a\x78\x5d\x49\xd1\x1a\x40\x21\xb5\xee\x7c\xec\x35\x22\xc8\xd6\xa2\x4e\xc0\xfe\x4d\x3b\x27\xb5\xfa\x11\x08\xdc\xc2\xbf\x30\x7e\x2f\x93\x7b\xa4\x7e\xbf\xbf\xe5\x22\x95\x5b\xa7\x90\x09\x33\x06\x66\x86\x23\x99\xc8\x02\xa2\x28\x82\xf6\xad\x69\xdd\xc0\x0f\x60\x6d\xb5\x79\x75\x5a\x10\x98\x4f\xf3\x75\x03\xdf\xc3\xa9\x79\x2e\x35\xc1\xf7\x60\xb9\xac\xe2\xd6\x4d\xb3\xa0\x16\xdc\x91\xa2\x44\xad\xd9\x0a\x0f\x03\xc4\x0d\x0a\xea\xa2\xac\xd7\x51\xea\x15\x44\xf0\x8f\xf7\x3f\xfd\xd3\xa9\x98\xd2\xd8\xa8\x38\xe6\xbe\x6f\x06\xd3\x5e\x8f\x67\xd0\xaf\xd5\xa2\x08\xc4\xba\x28\x76\xf6\x3d\x85\xb4\x56\xa2\x55\x7b\xbc\x3a\x52\x77\xea\x7b\x1f\x9e\x45\x11\xac\x45\x5a\x6f\x71\xba\xb7\xfc\x5b\xdf\x7a\xde\xcc\x09\x37\x8e\x69\x8f\x7b\x8b\x9b\x9d\xbb\x23\x6f\xdd\xe8\xf2\x29\x87\xbb\x81\xe7\xc0\x67\xc7\x7b\xc2\x2d\x2a\x25\xd5\x53\x3e\x85\xa4\x87\xfe\xef\x05\x7b\x90\x6b\x0a\xe0\x9a\x64\x75\x5b\x8f\x85\xd7\x03\x30\xfe\x03\xd8\x79\x18\xd4\x9d\x3e\x80\xeb\x9a\x32\x72\x5e\x62\x6d\x35\xf1\x3c\x6f\x00\xdd\xac\xfe\x77\xa6\x02\x30\x43\xd3\xe3\x13\xf1\xe8\x75\x92\x98\x99\xfe\x5b\x22\x6a\x7d\xec\x62\x6a\xe9\x3f\x1e\xd5\xe3\x71\x3e\x25\x85\xd4\x78\x92\xee\xa0\x91\x3e\x34\x5e\xfb\xbb\x92\x18\x80\xe9\x0f\x37\x2f\xe0\x71\xff\x5c\x71\x5d\x78\xad\x4d\xd5\x72\x9d\x03\x83\x2d\xc6\xba\x2e\x0a\x68\x6d\xcc\x3d\x46\x12\x28\x47\x78\xf9\xee\x4d\x5b\x71\x57\x75\x8e\xb5\x1a\xfd\x3a\xb8\x83\x1f\x6a\x42\xb7\x69\x09\xa1\xdb\xfc\x56\xfa\xdf\x00\x00\x00\xff\xff\x8f\x8b\x2d\x43\x3c\x15\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x36, 0x24, 0x8c, 0x8b, 0x23, 0xb0, 0x8e, 0x20, 0xba, 0xf3, 0x89, 0x3c, 0x15, 0x26, 0x2d, 0x45, 0xe3, 0x29, 0x5, 0xb4, 0xd, 0x1e, 0xc0, 0x3f, 0x66, 0x48, 0x80, 0x9d, 0xa6, 0x14, 0xec, 0x90}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": {indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
