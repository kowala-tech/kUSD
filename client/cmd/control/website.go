// Code generated by go-bindata.
// sources:
// static/index.html
// static/scripts.js
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xcd\x72\xdb\x36\x10\x3e\x8b\x4f\x81\x30\x57\x11\xa0\xe4\x9f\xa4\x8c\xa8\xa6\x93\xe6\xd0\x43\xa7\x39\xb4\x33\xed\x71\x05\xac\x48\x48\x20\xc0\x00\x4b\xc9\x8a\xc7\xef\xde\x01\x49\xd9\xb2\x65\x77\x3a\x6e\x3a\x3e\x98\xf8\x76\xb1\xbb\xdf\xfe\x41\x8b\x37\x3f\xff\xf6\xe9\xf7\xbf\xbe\x7c\x66\x35\x35\x66\x99\x2c\xe2\x3f\x66\xc0\x56\x65\x8a\x36\x5d\x26\x93\x45\x8d\xa0\x96\xc9\x64\xb2\x68\x90\x80\xc9\x1a\x7c\x40\x2a\xd3\x8e\xd6\xd9\xfb\xf4\x41\x50\x13\xb5\x19\x7e\xed\xf4\xae\x4c\xff\xcc\xfe\xf8\x29\xfb\xe4\x9a\x16\x48\xaf\x0c\xa6\x4c\x3a\x4b\x68\xa9\x4c\x7f\xf9\x5c\xa2\xaa\xf0\xe4\x9e\x85\x06\xcb\x74\xa7\x71\xdf\x3a\x4f\x27\xaa\x7b\xad\xa8\x2e\x15\xee\xb4\xc4\xac\x3f\x4c\x99\xb6\x9a\x34\x98\x2c\x48\x30\x58\xce\xd2\x65\x12\xed\x90\x26\x83\xcb\xad\x74\xda\xb2\x4f\xce\x92\x77\x86\x7d\x01\x8b\x66\x21\x06\x51\xaf\x65\xb4\xdd\xb2\xda\xe3\xba\x4c\x63\xac\xa1\x10\x42\x2a\xbb\x09\x5c\x1a\xd7\xa9\xb5\x01\x8f\x5c\xba\x46\xc0\x06\x6e\x84\xd1\xab\x20\x68\xaf\x89\xd0\x67\x2b\xe7\x28\x90\x87\x56\x5c\xf0\x0b\xfe\x4e\xc8\x10\xc4\x3d\xc6\x1b\x6d\xb9\x0c\x21\x65\x1e\x4d\x99\x06\x3a\x18\x0c\x35\x22\xa5\x4c\x2c\x5f\xf6\xcb\xb7\x6e\x0f\x06\x38\xa1\xac\xc5\x70\x49\x8c\xd0\x8b\xc6\x5e\xc7\x62\xed\x2c\x65\xb0\xc7\xe0\x1a\x14\x97\xfc\x1d\xcf\x7b\x02\xa7\xf0\x6b\x38\xc4\xfb\x81\x57\xce\x55\x06\xa1\xd5\xa1\xf7\x2a\x43\xf8\x71\x0d\x8d\x36\x87\xf2\xd7\x28\x47\xef\x81\x8a\x79\x9e\x4f\x2f\xf2\x7c\x7a\x99\xe7\xd3\xab\x3c\x9f\x5e\xe7\xf9\xcb\x04\x83\xf4\xba\x25\x16\xbc\xfc\xd7\x0c\x37\x5f\x3b\xf4\x07\x71\xc1\x67\x7c\x36\x1e\x7a\x46\x9b\x90\x2e\x17\x62\x30\xb8\xfc\x4f\xb6\x33\xeb\xe8\x20\xe6\xfc\x92\xcf\x44\x0b\x72\x0b\x15\xaa\xa3\xa7\x28\xe2\x47\xf0\xbb\xf9\x7d\xa9\xf7\x36\x4f\x5b\xef\x7b\x38\x6b\x5c\x83\x96\xf8\x26\x88\x39\x9f\xbd\xe7\xf9\x11\x38\xb7\xdf\x3b\x88\x45\x5b\x26\x71\x2f\xa0\x67\xb7\xc9\x5d\x32\x99\xac\x9c\x3a\x4c\xfb\xdd\x71\x9b\x30\xc6\x58\x03\xbe\xd2\xb6\x60\xf9\x87\xfe\xd8\x82\x52\xda\x56\xf7\xe7\x15\xc8\x6d\xe5\x5d\x67\x55\xc1\xde\xce\x7f\x80\xab\xf5\x7a\x10\x48\x67\x9c\x2f\xd8\xdb\xf5\x11\xc8\xf6\xb8\xda\x6a\xca\xfa\x76\x0d\x8d\x73\x54\xf7\x86\xc0\xc6\x45\xa0\x21\xa0\x1a\x15\x1b\xf7\x2d\x73\xe1\xe6\x4c\xb3\xf2\x70\xe8\xf7\xc5\x87\xe4\x2e\x49\xea\xd9\xb4\x9e\x4f\xeb\x0b\x76\x9b\x10\xde\x50\x46\x1e\x6c\x58\x3b\xdf\x14\x5d\xdb\xa2\x97\x10\x46\xbd\xf9\x94\xf5\x5a\x93\x81\x4a\x46\xae\x2d\xd8\x1c\x9b\x5e\x6a\x60\x85\x3d\xd5\x47\xf1\xde\x25\xc9\xaa\x23\x72\x76\x0a\x7c\xf8\x18\xb3\xf1\x40\x37\x3b\x5e\xc8\xf3\xcb\xcb\x77\xd7\xec\x8d\x6e\xe2\xda\x03\x4b\x4f\xf8\x63\xfc\x3b\x13\x2b\x1d\x5a\x03\x87\x82\x69\x6b\xb4\xc5\x6c\x65\x9c\xdc\x0e\xa2\x1d\x7a\xd2\x12\x4c\x06\x46\x57\xb6\x60\x8d\x56\x2a\x72\x8e\xb2\x3e\x25\xc3\x5c\xc6\xab\x35\x7a\x4d\x4f\x0a\xc3\xdf\x5f\x61\xc3\x66\x91\xdf\x69\xda\xa1\x6d\x11\x3c\x58\x89\x05\xb3\xce\x8e\xf6\x56\xce\x2b\xf4\x05\x9b\xb5\x37\x2c\x38\xa3\x15\xeb\xd3\xd8\x82\xc7\x63\xa4\x83\x4a\xe6\x41\xe9\x2e\x14\xec\xaa\xbd\x19\xf0\x5e\x51\x93\x76\xb6\x38\x4b\x0b\xe3\xf3\xab\xc0\x10\x02\x66\xae\xa3\xe9\x33\xd8\x09\x9d\xa0\xbf\x61\xc1\x66\xfe\x18\x71\x9f\x8f\x1a\x75\x55\x53\xc1\x66\xa3\xb3\x58\xe1\x31\x1f\x12\x2d\xa1\x1f\xb3\xdc\xf9\x10\xd3\xdc\x3a\xfd\x00\x3e\x53\xa4\xbe\xaa\x4f\xda\x84\x3d\xee\x93\x93\x4a\x8f\x9d\x52\xe4\xa7\x55\xbb\x8b\xb6\xe3\xd4\x88\x71\x6c\x92\xc9\x22\x0e\xcb\xf0\x00\x82\xb6\xfd\x87\xd2\x3b\x26\x0d\x84\x50\xa6\xf7\x75\x1c\x02\x4e\x99\x56\x65\x2a\x87\x57\x6d\x78\x36\x85\xd2\xbb\x47\xbb\x92\x0e\x2d\x96\x29\xb4\xad\xd1\x12\x62\x6a\xc5\x06\x76\x30\x08\xd3\xc7\x8b\xa0\xb3\xed\xb6\xea\xa7\xdf\x23\x48\xfa\x38\xbb\xe6\x39\xcf\x45\xd7\xa8\x01\xe0\xad\x77\xaa\x93\xd1\xc8\x3f\x6e\x97\xd7\xbb\xcc\x94\x6b\xce\xdc\x46\xf0\x7f\x75\xbd\x8a\x03\x9b\x05\x02\xab\xc0\x38\x8b\x1f\xaf\xf9\xfc\x9a\xe7\x03\xfe\xdc\x8e\x3b\xf5\x15\x3b\x60\xd0\x1c\xed\x8f\xaa\xe1\x3c\x46\x31\x96\x74\x21\x86\x22\x2f\xc4\xf0\xbb\xea\xef\x00\x00\x00\xff\xff\x4d\xef\xf9\x19\x68\x09\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticScriptsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x59\x5f\x8f\xdb\xb8\x11\x7f\x8e\x3f\xc5\x44\x05\x12\x19\x97\x95\xbc\x49\x0f\x38\x38\x92\x0e\xb9\xcd\xb5\x48\xd1\x34\x41\x72\x87\x3c\x04\x41\xc0\x95\xc6\x36\xb1\x32\x29\x90\xd4\x7a\x0d\x47\xdf\xbd\x20\x45\x49\xa4\x2c\x7b\x37\xd7\xf4\xcd\x1c\x0e\x7f\x1c\x72\xfe\xfd\x44\xe7\x25\x91\x12\xde\x52\xa6\xfe\x4d\xa5\xfa\x9d\x29\xb1\x07\xbc\x53\xc8\x0a\x09\x1f\x90\xe4\x2a\xba\xe2\xdb\x8a\x33\x64\x0a\x0e\x33\x80\x9c\x33\xa9\x44\x9d\x2b\x2e\xc2\x4a\xf0\x4a\xce\x8d\x18\x40\xd6\x15\x76\xa2\x97\x46\xa2\x36\x54\x46\x9c\x5d\x71\xb6\xa2\x62\x0b\xe9\x48\x10\x5d\x53\x56\x84\x5a\x66\xf4\x9b\x19\x80\x40\x56\xa0\x08\x3b\x48\x81\xaa\x16\x0c\x42\x33\x00\x48\x94\xc8\xec\x4f\x3d\x28\xb2\x83\x01\x34\x5b\x46\xa8\x2d\x8f\x68\xd1\x24\xb1\x2a\xee\x53\x53\x7c\x4a\x2d\x3c\xd2\x23\x5b\x5e\x33\x05\x31\x5c\x46\x0b\xbc\xfc\x65\x1e\x29\xfe\x0f\x7a\x87\x45\xf8\x7c\xde\x40\x78\x8c\xdb\xea\x37\xf3\x87\xd8\x90\xb7\xb7\x80\x05\xfc\x0a\xc1\x55\x37\x08\x60\x09\xc1\x7b\x64\x05\x65\xeb\x60\xc2\xc8\x7e\x00\x70\x78\x7c\x06\xf3\xc9\x13\x47\x13\x20\x21\xb0\x11\xb8\x4a\x83\xbf\x05\x60\x3c\x9e\x06\xd7\xb5\x52\x9c\x05\xc0\xd9\x55\x49\xf3\x9b\xf4\xe0\x7b\xa7\xc9\xec\x8f\x24\x26\xee\xae\xcd\x60\x8e\x67\xdc\xac\x17\x5a\x27\xf5\x4e\xed\x21\x43\xec\x1c\x8b\x51\x25\xf0\x16\x99\x7a\x8d\x2b\x52\x97\x2a\x9c\x0f\x01\xd3\x9e\x47\x22\x2b\x5e\x13\x45\xc2\x83\x05\x26\xb9\xa2\x9c\x2d\x21\xb0\x67\xfc\xba\xa5\x4c\x05\xcf\xec\xec\x9a\xdf\xa2\x60\x5c\x2c\x5d\x8c\x4e\xd8\x29\xd1\xc2\x9b\xee\x22\xa6\x9d\x6e\xe6\xc6\xdc\x66\x36\xf3\x33\xe2\x47\x24\xc3\x70\x38\xa9\x88\x42\x48\xe1\xd0\x9b\xf4\x11\x89\xc8\x37\x4b\x08\xfa\xb3\x90\xa2\x10\xc7\x52\xbd\xb2\x96\xbd\x7c\x61\x27\x9a\x01\x7b\x43\x58\x51\xe2\x1b\x8b\x78\xb5\x21\x6c\x8d\x5d\xd2\x4d\xcd\x8d\xf2\xcf\x43\x79\xd5\xdb\x30\x85\x33\x9e\x3d\x87\xf4\xd1\xb1\x7b\x0a\xeb\x78\xfe\xa8\x2e\xcc\x00\xb4\xaf\x28\xca\x71\x65\x18\x79\x93\xa2\x8c\x56\xb4\x54\x28\x42\x08\x8d\x7b\xe7\x90\x66\xc3\x65\xaf\x20\x1c\xbc\x10\x75\x77\x0f\x8f\x53\x08\x02\x78\xf2\x04\xba\x88\xd0\x92\x09\xc5\x79\x8f\xd4\x1b\xb0\x22\xa5\xc4\x99\x9f\x19\xa3\x6d\x06\x77\x8e\x37\x52\x3c\xa2\xac\xc0\xbb\x77\xab\x69\xfd\x39\xa4\x29\x5c\x5c\xfe\xb5\x6d\xdd\x78\xd1\x38\xc1\xa5\xd9\xf9\xf1\xa8\x50\xfc\x20\xf0\xe7\xce\xb1\xbe\x17\xbb\xf3\xa5\xa8\xd1\xcd\xc4\x19\xc0\x54\xd4\x0e\x45\xa4\xb5\x07\x95\x8e\x20\x0c\x0f\x43\x2a\x61\xa4\x88\x58\xa3\x8a\x6e\x49\x59\xe3\x18\x6e\x1c\xbc\x27\x01\xdd\x3c\x3c\x0f\x79\x1c\xc3\x27\x41\xfd\x34\x3e\x05\x7b\x5f\x1f\x24\xd7\x25\xba\x7d\x61\x83\xc4\x6b\x0d\x5e\xa7\xb4\x2a\xd9\x9b\xd7\x90\x50\x56\xd5\x0a\xaa\x92\xe4\xb8\xe1\x65\x81\x22\x0d\x48\x59\x06\xa0\xf6\x15\xa6\x81\xc2\x3b\x15\x80\xb1\xc5\xb6\x03\x3f\x01\x1a\x5d\xcb\xcd\xf9\xec\xf4\x94\x83\x1a\x90\x6a\x5f\x62\x7a\x38\xec\x68\xa1\x36\x4b\xf8\xfb\xa2\x69\xe2\x2c\x89\xd5\xe6\xd8\x26\xed\x0c\x94\xf2\xaf\x1a\x36\xb8\xe8\x84\x69\x63\x67\x9f\x36\xc4\x74\xee\xe9\xb9\xd6\xbd\x90\x48\x2c\x31\x57\x13\x66\xb8\x4e\x3d\x61\xc8\x71\x88\x34\xfe\x46\x00\x09\xaf\x74\x8b\xb3\xf8\xc1\x22\xc8\x5e\x95\x65\x12\xb7\xd2\x7b\x94\x2f\x83\xac\xa7\x10\x0f\x5c\xf2\x3c\xc8\x2c\xcf\x98\x5e\x90\xc4\xed\x79\x4f\x5d\x98\xe9\xc7\x72\x3c\x39\xf4\x7f\x3b\xf2\x43\x33\x51\xd7\xbc\xd8\x7b\x2c\xc6\x5c\x52\x5f\xdf\xa3\x2d\xa9\x42\xa7\x76\x87\xfe\xc6\x3e\x4f\xbd\xc1\x7d\x7a\xe8\x89\x5f\x5b\x7e\xac\xa0\xe9\x29\x41\x7a\x98\xa0\x04\x0d\x74\x04\xc3\x9b\xee\x84\x0d\xc4\xae\x8d\xf3\xb9\xc7\x7a\xdc\x23\x24\xb1\x93\x8c\x13\x14\x82\xb2\xf5\xff\x97\x41\x0c\xcc\xc7\x67\x10\x28\xa5\x27\x32\xf1\xed\x4a\x6a\x46\xf5\xf8\xf2\x97\x53\x4c\xe2\x9f\x16\x79\xaa\x6b\xfb\x73\xf7\x31\x09\x94\xf2\x14\x8d\xe8\xa7\xce\x62\x18\xe3\x27\x21\x9c\x99\x73\x08\x7f\x32\x3a\xb9\x7e\x90\x9f\x5b\xfd\x5e\xf0\x8a\x4b\xd4\xfe\xf4\x97\x3b\x13\x53\xac\x25\xef\x5c\xfd\x89\x96\xe5\x07\xcc\x91\xde\x9a\x25\x32\x64\x78\xa7\xde\xbb\xee\x1e\x35\xd8\xce\xab\xa6\xb9\x9a\xde\xda\xaf\x88\x48\x9e\xeb\x43\xcb\x69\x69\x54\x22\x5b\xab\x0d\x64\xb0\x18\xfa\xef\xa8\x09\x39\x41\x73\x0c\xf0\x79\xf1\x05\x1a\x7b\x07\xcd\x03\x1b\xd2\x8a\x62\x59\x48\x54\x4e\xa2\x6f\x5e\x64\xe6\xbe\x14\xbf\x41\x5d\x26\x36\x2f\x9c\xc9\x92\x5c\x63\x09\x2b\x2e\xd2\xa0\x33\xe5\xab\xdd\x3f\xc8\xba\xd8\x02\x2b\x49\x62\xa3\x9e\xcd\x86\xf5\xb6\x12\xbb\xcd\x61\xb2\xea\xfa\x61\xda\x4c\x94\xee\xbe\x20\x78\x35\xc9\xfd\x12\xec\xee\xe5\xdb\xb7\xcf\x5f\x6c\x79\xb2\xa2\xa9\x02\x65\x6b\xac\xa9\x4c\x56\xad\xdf\xb6\x1b\x67\xfd\xaf\xa9\xca\xeb\x17\x1b\x5b\x83\x9d\xb3\xaf\xb8\xd8\x02\x67\x1f\xeb\xeb\x2d\x55\xde\x69\x9d\x68\xf4\x8e\xe3\x5e\xb7\xfe\x6a\xfa\x6a\xeb\x43\x90\x7d\xc0\x9c\x56\x54\xd7\xa2\x56\xd2\x5f\xb5\xb3\xb8\xed\xcc\xee\x55\xd3\x62\x84\x73\xba\xf7\xf6\xe9\x3d\x75\xf7\x76\x79\x13\x9f\x37\x76\xdb\x86\x45\xd7\xa1\xbf\xcf\xc2\x76\xf1\x09\x03\x9d\xe2\x31\x69\x5f\xfb\x35\x7f\xde\x3c\x5d\x46\x83\x4c\xd7\x91\x29\xd3\x26\x02\xb5\xb7\xcd\xac\x9c\xb6\x6c\x28\x4b\x53\x76\xe9\x85\x23\xf6\x30\xa6\x03\xbf\x04\xd9\xf6\x0f\x9d\x79\x27\x7a\xfb\x11\xd5\x68\xb5\x61\x87\x74\x6a\xc5\x10\x87\x8e\xac\x7d\x40\xc8\x6c\xd4\x25\xb1\x1d\x3b\xc1\xab\x43\x35\x9b\xcd\x1e\x3d\xea\xab\x01\xaf\x50\x10\x4b\x1c\x74\x45\x18\x94\x87\xef\xed\x96\x0a\x78\x7d\x79\xdb\x4d\x7e\xfb\x06\x9f\xbf\x1c\xf5\xf6\x51\x2a\xdf\xd3\xdb\xe3\xa1\x77\xfb\x75\x6b\x6e\x1f\x2c\xa6\x6a\xc7\x49\x42\x3f\x94\xd2\x49\x32\xef\x7e\x75\xf4\xc9\x70\xf6\x93\xc3\x34\xee\xf3\x58\x4e\xdc\x9e\x86\xb2\x0d\xff\x2c\xd2\x10\x67\x27\x71\x5a\x9a\x70\xfe\xfb\xc7\x29\x3c\xe7\xde\x78\x5e\x3e\xfc\x91\xe7\xdc\xe3\x8e\xef\xed\x4e\xc9\x2d\x48\x9e\xa2\x95\xf9\x7a\xf6\x72\x8e\x92\xdd\xd3\x6a\x8f\x3e\x4a\xbc\xc9\xc7\xa2\x57\x55\xf5\x43\x1f\x4d\xc7\x24\xaf\xeb\x41\x4b\xf8\xfc\xa5\x33\x31\xe7\x94\x5d\x13\x89\x2e\xa7\xbb\x2e\x79\x7e\xb3\x84\x85\x65\x74\xc7\x44\xe4\x35\x2d\xde\x6a\xa4\xd0\xf3\xb6\xc0\x9c\x33\x86\x79\xfb\x0e\xa7\xc3\x63\x4c\x5e\xfe\x64\xdb\xe3\x65\x3b\x19\xe5\x25\x97\xe8\x79\x76\x27\x21\x85\x9a\x15\xb8\xa2\x0c\x8b\x97\x03\x81\xe8\xb7\xf0\x21\x20\x05\x86\x3b\xf8\x84\xd7\x1f\x79\x7e\x83\x2a\x0c\xc3\x1d\x65\x05\xdf\x45\x25\xcf\x4d\xa9\xd0\xc1\xa2\x78\xce\x4b\x48\x35\x1b\xda\x28\x55\xc9\x65\x30\x87\x5f\x21\xd8\x49\xb9\x8c\x63\xf3\x66\xba\x33\xbf\xe6\xf0\x13\x8c\x97\x6f\xb8\x54\xf0\x13\x04\x31\xa9\x68\xe0\x9b\x1a\x71\x66\x4e\x00\x29\x84\xde\x53\x91\x44\xf5\x07\xdd\x22\xaf\x55\xe8\xdf\x90\x43\xf3\x9e\xc1\x8b\xc5\x62\xd1\x31\xa5\x31\xee\x16\xa5\x24\x03\xdd\xe4\xec\x93\x7c\xdb\x8a\x1c\x88\xee\x76\x9c\xd9\xd0\xe4\x4c\x77\x49\xb7\x44\xc0\x56\xae\x21\x85\x7f\x7d\x7c\xf7\x9f\xa8\x22\x42\x5a\x8d\xa8\x20\x8a\xd8\xcd\x35\x79\x34\x5a\x69\x0a\xac\x2e\xcb\x81\xf8\xb5\x44\xad\x23\x73\xae\x72\x64\x62\x05\x1e\xa7\x8e\xb7\x4e\x12\x46\x1b\x57\xfd\x32\x97\x1f\x0e\x88\x5d\x44\x3e\x10\x74\x08\x60\x77\xf1\x34\x74\xcf\x79\x1f\x06\x3d\xe4\x8b\xbb\x78\x1a\xba\xef\x2d\x0f\x83\xee\xd4\x5b\xe8\x6e\x34\x0d\x8d\x42\x70\x71\x0a\x97\x71\xb5\x0f\x0f\x25\xd9\xf3\x5a\x2d\xe1\xa9\xe2\xd5\x15\x32\x85\xe2\xe9\x33\xd0\x44\xa1\xc5\x37\x08\xcf\x0c\x7f\x58\xc2\x53\x33\xd2\xf3\x6d\x68\x2e\xe1\xe7\xc5\x62\xf1\x0c\x2a\xc1\xd7\xba\xc4\xfd\x46\x74\x89\x14\xf5\x89\x3b\x94\x75\x9e\xa3\x3c\x79\x85\x0f\xb2\xc7\x62\xf4\x16\xd9\xf1\x77\xda\x64\x22\xb1\x2f\xfe\x26\x90\x47\x75\x45\x4f\x86\x26\xe4\xa5\x12\x94\xad\xe9\x6a\xdf\xea\xcd\x5f\x3e\xf0\x93\xa4\xa0\xb7\xdd\x3f\x1d\x39\x67\x8a\x50\x86\x22\xc8\x66\x8f\x92\x0d\x92\x02\xdd\x37\x0a\x47\x53\xf0\x5d\xe0\x71\x1c\x0f\xa5\xbc\x28\xd7\x17\x97\xcf\x83\x11\x97\xda\x5c\x66\x37\x3a\x7a\xe1\x8a\x33\x25\x78\x09\xef\x09\xc3\x32\x89\x37\x97\x3e\x85\x2a\xe8\xad\x4b\x8e\xfc\xa1\x6f\x04\xc8\x7a\xbb\x25\x62\x7f\xd6\x18\xb9\xbd\xf8\x39\xc8\x12\xda\xc9\x56\x04\x56\xe4\x42\xdf\x92\xce\xa3\x00\x88\xa0\xe4\x62\x43\x8b\x02\x59\x1a\x68\x17\x04\x59\x12\xd3\x0c\x5c\xce\xd4\x67\x5d\xdf\x4e\x46\x86\x4d\x6e\xfb\xe2\x7f\xdd\xb6\x2d\x22\x6d\xbb\x92\xd3\x37\xf3\x28\x89\x3b\x4f\xf9\x24\x91\xb2\x75\xdf\x0f\x7d\xba\xde\xa5\x39\x74\x59\xe9\x4d\xf7\xa9\x3a\xa6\x87\xdd\xd0\xa9\xcb\xce\xfb\x8f\x63\x5d\xdf\xf4\x4d\x8b\x7f\xfd\xee\x6d\x64\x63\x70\x06\x90\x68\x0a\x10\x67\xba\xf1\x16\x3c\xaf\xb7\xba\x42\xaf\x51\xfd\x5e\xa2\xfe\xf9\xdb\xfe\x4d\x11\x3e\xcd\xdb\xf8\x78\x3a\x9f\xcd\x5f\xce\x66\xff\x0d\x00\x00\xff\xff\xf3\x71\xe2\x54\x79\x1d\x00\x00")

func staticScriptsJsBytes() ([]byte, error) {
	return bindataRead(
		_staticScriptsJs,
		"static/scripts.js",
	)
}

func staticScriptsJs() (*asset, error) {
	bytes, err := staticScriptsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/scripts.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
	"static/scripts.js": staticScriptsJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": {nil, map[string]*bintree{
		"index.html": {staticIndexHtml, map[string]*bintree{}},
		"scripts.js": {staticScriptsJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
