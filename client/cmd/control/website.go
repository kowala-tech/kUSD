// Code generated by go-bindata. DO NOT EDIT.
// sources:
// index.html (5.73kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xeb\x6f\xdb\x38\x12\xff\xec\xfc\x15\xb3\xea\x2d\x62\x63\xad\x97\x1f\xb1\xa3\x4a\x5e\xf4\xd2\x62\xd1\x03\x7a\x5b\xa0\x5d\xdc\xde\xa7\x05\x25\x8d\x2c\x26\x14\xa9\x25\x69\xbb\xb9\x45\xff\xf7\x03\x29\xc9\x96\x1f\x69\x7b\xed\xe2\xee\xf2\x21\xd1\x3c\x7e\x33\x43\x72\x66\x38\x4c\xfc\xdd\xcb\x9f\xef\xde\xff\xf3\xed\x2b\x28\x75\xc5\x56\x57\xb1\xf9\x03\x8c\xf0\x75\xe2\x20\x77\x56\x57\x83\xb8\x44\x92\xaf\xae\x06\x83\xb8\x42\x4d\x20\x2b\x89\x54\xa8\x13\x67\xa3\x0b\x77\xe9\x1c\x04\xa5\xd6\xb5\x8b\xbf\x6f\xe8\x36\x71\x7e\x75\x7f\x79\xe1\xde\x89\xaa\x26\x9a\xa6\x0c\x1d\xc8\x04\xd7\xc8\x75\xe2\xbc\x7e\x95\x60\xbe\xc6\x1e\x8e\x93\x0a\x13\x67\x4b\x71\x57\x0b\xa9\x7b\xaa\x3b\x9a\xeb\x32\xc9\x71\x4b\x33\x74\x2d\x31\x06\xca\xa9\xa6\x84\xb9\x2a\x23\x0c\x93\xd0\x59\x5d\x19\x3b\x9a\x6a\x86\xab\x87\x4c\x50\x0e\x77\x82\x6b\x29\x18\xbc\x25\x1c\x59\xec\x37\x22\xab\xc5\x28\x7f\x80\x52\x62\x91\x38\x26\x56\x15\xf9\x7e\x96\xf3\x7b\xe5\x65\x4c\x6c\xf2\x82\x11\x89\x5e\x26\x2a\x9f\xdc\x93\x0f\x3e\xa3\xa9\xf2\xf5\x8e\x6a\x8d\xd2\x4d\x85\xd0\x4a\x4b\x52\xfb\x53\x6f\xea\x2d\xfc\x4c\x29\x7f\xcf\xf3\x2a\xca\xbd\x4c\x29\x07\x24\xb2\xc4\x51\xfa\x91\xa1\x2a\x11\xb5\x03\xfe\xea\xeb\xfc\x16\x82\x6b\x97\xec\x50\x89\x0a\xfd\x99\xb7\xf0\x02\xeb\xb2\xcf\xfe\x1a\xaf\x06\xaf\xbc\xb5\x10\x6b\x86\xa4\xa6\xca\x7a\xcd\x94\xfa\xb1\x20\x15\x65\x8f\xc9\x1b\x23\x47\x29\x89\x8e\x26\x41\x30\x9e\x06\xc1\x78\x16\x04\xe3\x79\x10\x8c\x6f\x82\xe0\xb2\x27\xe3\x4a\x65\x92\xd6\x1a\x94\xcc\xbe\x78\x85\xf7\xbf\x6f\x50\x3e\xfa\x53\x2f\xf4\xc2\x96\xb0\x2b\xba\x57\xce\x2a\xf6\x1b\x83\xab\x6f\xb2\xed\x72\xa1\x1f\xfd\x89\x37\xf3\x42\xbf\x26\xd9\x03\x59\x63\xde\x79\x32\x22\xaf\x63\xfe\x69\x7e\x9f\xca\x96\xfb\xd3\x64\xf9\x33\x9c\x55\xa2\x42\xae\xbd\x7b\xe5\x4f\xbc\x70\xe9\x05\x1d\xe3\xdc\xbe\x75\x60\x0e\xcd\xb8\x1a\x94\xe1\x18\xca\xc9\x18\xca\x29\xfc\x61\xe8\x81\x4d\xaa\x26\x01\x22\x38\x64\xc0\xf3\x83\x70\x87\x74\x5d\xea\x08\x26\x41\x60\xb9\x1f\xcd\x2f\xd2\xa0\x33\xc1\x84\x8c\xe0\x59\x58\x04\xd3\x69\x7e\x01\x34\x3b\x02\x45\xa5\xd8\xa2\x3c\x86\xce\xc3\x30\x5f\x86\x9f\x83\x7a\x5b\x94\x9a\x66\x84\xb9\x19\x72\x8d\xb2\x8d\xbe\xa2\xdc\x2d\x5b\xfd\x30\x08\xbe\x7f\x7e\x89\xbb\x2d\x1b\x76\x4e\x55\xcd\xc8\x63\x04\x05\xc3\x0f\x0d\x8b\x30\xba\xe6\x2e\xd5\x58\xa9\x08\x1a\xcb\x8d\x20\x25\xd9\xc3\x5a\x8a\x0d\xcf\xdd\x4b\x6b\xec\x78\x45\x51\x3c\xff\xca\x6d\xec\xb9\x30\xbb\x30\x0d\xb3\xe5\x1c\xbe\xa3\x95\xe9\x82\x84\x37\x48\x80\xbe\x92\x5b\x89\x7f\xb9\x8c\x72\x24\xd2\x5d\x4b\x92\x53\xe4\x7a\xa8\x45\x3d\xde\xc3\x83\xef\xcd\xf7\x22\x4c\x97\x33\x08\x67\x86\xb8\x99\x85\xb7\xcb\x00\xa6\x56\xb2\x20\xe1\x7c\x41\x60\x76\x63\x88\xdb\x65\x18\x2c\x42\xb8\x99\x18\x22\xc5\x80\xdc\xcc\x61\x71\x6b\x08\xcc\x83\xc9\x7c\x09\xb7\x56\xad\xb8\x0d\x82\xf9\xcc\x6e\xee\xe8\x33\xe1\xed\x30\x7d\xa0\xfa\xff\x38\xc2\xf3\xc8\x20\x15\x5a\x8b\xea\x7f\x18\x5f\x41\x99\x46\x19\x41\x2d\xc5\x9a\xe6\xd1\xcb\x5f\x5f\x57\x64\x8d\xef\x25\xe1\xaa\x10\xb2\xf2\xde\xd0\x4c\x0a\x25\x0a\xed\xed\xc3\x06\xa5\x89\xd4\x77\x26\x05\x95\x96\xc9\x75\x1b\xfb\xf5\x18\x90\xe7\x3d\x76\xe3\xf8\x7a\xfc\x53\x0b\x7c\xff\x58\x63\x12\xc0\xa8\x57\x55\xc6\xab\x44\xa5\xda\x72\xaa\x85\xa2\x9a\x0a\x1e\x99\x5e\x4f\x34\xdd\xe2\x25\x5d\x55\x13\x7e\x06\x20\xa9\x12\x6c\xa3\xf1\xa4\xd4\x52\x26\xb2\x87\x86\x67\xaf\xf0\x7e\x99\xb6\x45\xb4\x2b\x69\x0b\x03\xeb\x08\x6a\x89\xad\x79\xa8\x49\x9e\x53\xbe\x8e\xe0\xa6\x6e\x2b\x16\x2a\x22\xd7\x94\x47\x10\x1c\x20\xb1\xdf\x35\xb8\xd8\x6f\xa6\x95\xab\x41\x9c\x8a\xfc\xd1\x76\xd7\x9c\x6e\x21\x63\x44\xa9\xc4\x39\x69\x22\x76\x0a\x39\x52\x30\xc3\x07\xa1\xbc\x13\x1d\xc9\xa4\xd8\x39\x60\x1d\x25\x4e\x13\x84\xdb\x64\x4f\x04\xa1\x09\xaf\x85\x9c\xd8\x63\x2e\x5b\xbb\xe1\xa4\x13\x0e\xe2\x32\xec\x8c\x68\xfc\xa0\x5d\xdb\x81\xf6\xbd\xc7\x34\x6e\x7a\x79\x92\x29\xc3\xce\xbe\x9f\xd3\x6d\x1b\x5e\xef\xf3\xd3\x91\x6a\x51\x47\x30\x9d\x7c\x22\x4c\x55\xb9\x73\x67\x15\xd3\x8e\x57\x10\x28\x88\x9b\x13\x4d\x52\xa2\xd0\x01\x22\x29\x71\x4b\x9a\xe7\xc8\x13\x47\xcb\x0d\x36\xb1\x42\x6c\xd3\x81\xe6\xc6\x0a\xe5\x56\xd7\xdc\x3e\x35\xe1\x2b\xe8\x38\xbd\x38\x2f\xf9\x9d\x7e\x9b\x5f\x9b\x63\x07\xa7\x96\x54\xe7\xbb\xd4\x7c\x97\xd2\xef\x3e\x0b\x8a\x2c\x57\xa8\xbb\xc0\x18\xae\x91\xe7\xab\x37\x94\x6b\xd0\xe2\x01\xb9\x8a\xfd\x96\xd7\x69\x90\x14\x19\x14\x42\x26\xce\xda\xdc\x64\x5c\xc8\xdf\x48\x96\x89\x0d\xd7\xce\xea\xa7\x96\x03\x2d\x27\x82\xd8\xb7\x80\x0e\xad\x90\x61\xa6\x41\x9b\x32\xb4\x87\xef\xb4\xc3\xef\x99\x2d\xbb\xac\x73\x0f\x5d\x0a\x89\xda\xd4\x1c\x6c\x09\xdb\x60\xe2\x04\x1f\x8a\xe5\x4d\x88\x61\x60\x3a\xd5\x7c\x42\x66\x93\xe2\x36\x9b\x4f\x16\x64\x36\x25\xe9\x62\x91\x4d\x83\x69\x80\x38\xc9\x96\x85\xb3\xfa\x72\xdd\xd8\x6f\xbc\xec\x93\xae\x89\xbe\xdd\xbb\x41\x6c\x9a\xd3\x3e\xa0\xde\xbe\x54\x94\xeb\xdf\x48\x9e\x9b\x4e\xe1\xac\x5e\x34\x1f\xa7\x5b\x31\x88\x29\xaf\x37\x97\xb6\xe2\x08\x6e\xb7\xe1\x88\xe3\x3f\xed\xb2\x6a\xf6\xe8\x45\x75\x69\xef\x3f\xe7\xb0\x3a\x6c\x7b\x9f\xf1\xb4\xbb\x0d\xa7\xda\x59\xfd\xc2\xa9\x8e\x4e\x3d\x3d\x79\xcc\x07\xe0\xc1\x51\x63\xa7\x85\x9e\x9e\x6c\xb8\x74\x56\xd5\x7b\x93\x89\x27\xa7\x71\x9e\x03\x9d\x22\xec\x90\x9e\x2a\x1f\xce\xae\xa5\xd3\x8d\xd6\xa2\xa9\x9d\x5a\x8a\x5a\x28\x34\x39\x4f\xf9\xda\x59\xbd\x6d\xe8\xd8\x6f\x74\xf6\xa7\xdf\x1c\x77\x4b\x1d\x6a\x68\x10\x6b\x92\xb6\xa3\xa5\xa5\xba\xc7\x62\x4b\xca\xfd\xb7\x91\xad\x5e\xbf\x8c\x7d\x5d\x1e\xf3\xda\x14\xb9\x20\xb0\x67\x70\xce\x7f\xa7\x89\xde\x5c\xd2\xcf\xcc\xa2\x8f\x05\xb1\x7f\x08\xc1\x08\x7a\xd1\xc5\xba\xbb\x21\x2e\x04\x3b\x88\x75\xbe\x0a\x63\x5f\xe7\x27\xbc\xe0\x43\x9a\xa6\x37\xb7\xf9\x8c\x14\xf3\xdb\x25\x2e\x6f\x96\x8b\xf9\x24\x4f\x83\x74\x3a\x5b\x66\xe1\x62\x4e\xe6\x24\x08\x6f\xc3\x74\x76\x73\x01\x1c\x7a\x41\x00\xc3\x30\x38\xfb\x19\x5d\x50\x36\xcf\x67\x86\x1a\xf3\x0b\xb2\x63\x56\x7f\x91\xff\x95\x75\x4c\xbc\x69\x00\xc3\xc9\xf4\x8b\xd6\xf1\x16\xb9\xb9\xc2\x2f\xad\x82\xb4\x0f\xd4\x67\xce\xea\x4e\xf0\x82\xca\x2a\xf6\xc9\x27\x16\x17\xfb\xfd\x33\x8b\xfd\x5e\xee\xc5\xfe\x51\x37\xdf\x77\xff\x43\xef\x8f\x0f\x0f\xae\xc1\x96\x48\x50\x28\xb7\x66\xda\x37\xb4\xef\xc3\x4b\x2c\x28\x47\x20\x50\xa1\x2e\x45\x0e\x5a\x80\xc4\x4c\x70\x6e\x6a\x79\x53\x0b\xde\x02\x80\x09\xa5\x3a\x1b\x07\x8d\x04\x8a\x0d\xb7\x09\x38\x1c\xb5\xc3\x4b\xab\x9f\x00\xc7\x1d\xfc\x03\xd3\x77\x22\x7b\x40\x3d\x1c\x0e\x77\x94\xe7\x62\xe7\x31\x91\x11\x03\x30\x83\x95\x16\x99\x60\x90\x24\x09\xb4\x0f\x40\x67\x04\x3f\x82\xb3\x53\xe6\x29\xe8\x40\x64\x3e\xcd\xd7\x08\x7e\x80\x53\x78\x29\x94\x86\x1f\xc0\xf1\x49\x4d\x9d\x51\xb3\xa0\xd6\xb9\x27\x78\x85\x4a\x91\x35\xf6\x03\xc4\x2d\x72\xdd\x45\x69\xd7\x51\xa9\x35\x24\xf0\xb7\x77\x3f\xff\xdd\xab\x89\x54\xd8\xa8\x78\xe6\x12\x6e\xa6\xc5\xc1\x80\x16\x30\xb4\x6a\x49\x02\x7c\xc3\xd8\x1e\x3f\x90\xa8\x37\x92\xb7\x6a\x1f\xaf\x8e\xd4\x3d\x7b\x19\xc3\x77\x49\x02\x1b\x9e\xdb\x2d\xce\x0f\xc8\xbf\x0c\x9d\x67\xcd\xe5\x3d\xf2\x4c\xa3\x3c\x20\x46\x7b\x73\x47\xd6\xba\x79\xe2\x53\x06\xf7\x53\x48\xcf\x66\xc7\x7b\xc2\x2c\x4a\x29\xe4\x53\x36\xb9\xd0\x8f\xc3\x3f\x18\x79\x14\x1b\x1d\xc1\xb5\x16\xf5\x9d\x9d\xd5\xae\xc7\x60\xec\x47\xb0\xb7\x30\xb6\x3d\x3f\x82\x6b\x4b\x19\x39\xad\xd0\xa2\xe6\x41\x10\x8c\xa1\x1b\xa0\xff\x4a\x64\x04\x66\x92\xf9\xf8\x44\x3c\x6a\x93\x65\x66\xd0\xfe\x96\x88\x5a\x1b\xfb\x98\x5a\xfa\x3f\x8f\xea\xe3\x71\x3e\x65\x4c\x28\x3c\x49\x77\x50\xa8\xdf\x37\x56\x87\xfb\x92\x18\x83\xe9\x0f\xa3\xe7\xf0\xf1\xf0\x86\xf0\x7d\x78\xa5\x4c\xd5\x52\x55\x02\x81\x1d\xa6\xca\x16\x05\xb4\x18\x73\xa3\x69\x01\xba\x44\x78\xf1\xf6\x75\x5b\x71\x57\x36\xc7\x5a\x8d\x61\x9b\xe0\xe6\xa4\x4f\xee\xae\x91\x97\x31\x9a\x3d\x0c\x0f\x79\xde\x6d\x19\x7a\xb5\xb4\x19\xfd\x12\x0b\xb2\x61\xd6\xc8\xc0\x3e\x40\xb8\xd2\xd0\xcd\x59\x90\x80\xb1\x7a\x36\x76\x8d\xbc\x2d\x61\xc7\x90\xfe\x4c\xd2\xc2\x8e\xc6\x94\x27\x21\xf6\x4a\x3b\x42\x54\x9f\xf4\x61\xc6\x83\xbe\xba\x1d\x17\x8e\x94\xdb\x83\x51\xc8\xf3\xa1\x2d\x60\xa5\x25\xe5\x6b\x5a\x3c\x0e\xdb\x7c\x21\x59\xf3\x42\xb3\x03\x87\x33\x6e\x98\xdd\x2a\x5b\xb2\x1f\xfd\x11\xcb\x86\xd7\xe7\x98\x08\x9a\xbc\x18\xb5\x0f\xc9\x51\xf3\x02\xeb\xba\x6b\xec\x37\x3d\x3a\xf6\x9b\xff\x28\xff\x3b\x00\x00\xff\xff\x02\xa7\xa5\x91\x62\x16\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbc, 0xd6, 0x81, 0x37, 0x49, 0xc0, 0xfc, 0xdc, 0xa6, 0x10, 0xfe, 0xe1, 0x3d, 0xb9, 0x60, 0x9b, 0xdf, 0xae, 0x95, 0xbf, 0x8, 0x6b, 0x3d, 0xc0, 0xdc, 0x93, 0xcc, 0x41, 0x37, 0xb5, 0xfd, 0x5f}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": {indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
