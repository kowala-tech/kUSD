// Code generated by go-bindata. DO NOT EDIT.
// sources:
// index.html (7.655kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x7b\x73\xdb\x36\x12\xff\x5b\xfe\x14\x1b\xb6\x1d\x4b\x53\x89\x0f\xbf\xe2\x28\xa4\xda\xd4\xce\x75\x7c\xd3\x5c\x33\xd7\x74\xd2\x9b\x9b\x9b\x06\x22\x57\x22\x6c\x10\x60\x01\x50\x8a\xcf\xe3\xef\x7e\x83\x07\x29\xca\x92\x93\x36\xe9\xcd\xdd\x3f\x32\xb0\xd8\xc7\x0f\x8b\xdd\xc5\x82\x4e\x9f\x5c\xfe\x78\xf1\xe6\x1f\xaf\x5f\x42\xa9\x2b\x36\x3b\x48\xcd\x1f\x60\x84\x2f\xb3\x00\x79\x30\x3b\x18\xa4\x25\x92\x62\x76\x30\x18\xa4\x15\x6a\x02\x79\x49\xa4\x42\x9d\x05\x8d\x5e\x4c\xce\x83\xcd\x42\xa9\x75\x3d\xc1\xdf\x1a\xba\xca\x82\x5f\x26\x3f\xbf\x98\x5c\x88\xaa\x26\x9a\xce\x19\x06\x90\x0b\xae\x91\xeb\x2c\xb8\x7a\x99\x61\xb1\xc4\x9e\x1c\x27\x15\x66\xc1\x8a\xe2\xba\x16\x52\xf7\x58\xd7\xb4\xd0\x65\x56\xe0\x8a\xe6\x38\xb1\x93\x31\x50\x4e\x35\x25\x6c\xa2\x72\xc2\x30\x4b\x82\xd9\x81\xd1\xa3\xa9\x66\x38\xbb\xc9\x05\xe5\x70\x21\xb8\x96\x82\xc1\x6b\xc2\x91\xa5\x91\x5b\xb2\x5c\x8c\xf2\x1b\x28\x25\x2e\xb2\xc0\x60\x55\xd3\x28\xca\x0b\x7e\xad\xc2\x9c\x89\xa6\x58\x30\x22\x31\xcc\x45\x15\x91\x6b\xf2\x3e\x62\x74\xae\x22\xbd\xa6\x5a\xa3\x9c\xcc\x85\xd0\x4a\x4b\x52\x47\xc7\xe1\x71\xf8\x34\xca\x95\x8a\x3a\x5a\x58\x51\x1e\xe6\x4a\x05\x20\x91\x65\x81\xd2\xb7\x0c\x55\x89\xa8\x03\x88\x66\x9f\x66\x77\x21\xb8\x9e\x90\x35\x2a\x51\x61\x74\x12\x3e\x0d\x63\x6b\xb2\x4f\xfe\x14\xab\x46\x5e\x85\x4b\x21\x96\x0c\x49\x4d\x95\xb5\x9a\x2b\xf5\xcd\x82\x54\x94\xdd\x66\xaf\xcc\x3a\x4a\x49\xf4\xf4\x28\x8e\xc7\xc7\x71\x3c\x3e\x89\xe3\xf1\x69\x1c\x8f\xcf\xe2\x78\xbf\x25\x63\x4a\xe5\x92\xd6\x1a\x94\xcc\x7f\xf7\x0e\xaf\x7f\x6b\x50\xde\x46\xc7\x61\x12\x26\x7e\x62\x77\x74\xad\x82\x59\x1a\x39\x85\xb3\xcf\xd2\x3d\xe1\x42\xdf\x46\x47\xe1\x49\x98\x44\x35\xc9\x6f\xc8\x12\x8b\xd6\x92\x59\x0a\x5b\xe2\x9f\x66\xf7\xb1\x68\xb9\x7e\x18\x2c\x7f\x86\xb1\x4a\x54\xc8\x75\x78\xad\xa2\xa3\x30\x39\x0f\xe3\x96\xb0\xab\xdf\x1a\x30\x87\x66\x4c\x0d\xca\x64\x0c\xe5\xd1\x18\xca\x63\xb8\x33\xf3\x81\x0d\x2a\x17\x00\x53\xd8\x44\xc0\xf3\xcd\xe2\x1a\xe9\xb2\xd4\x53\x38\x8a\x63\x4b\xbd\x37\x3f\xc4\x49\xe7\x82\x09\x39\x85\x2f\x92\x45\x7c\x7c\x5c\xec\x11\x3a\xd9\x12\x9a\x96\x62\x85\x72\x5b\xf4\x34\x49\x8a\xf3\xe4\x63\xa2\xe1\x0a\xa5\xa6\x39\x61\x93\x1c\xb9\x46\xe9\xd1\x57\x94\x4f\x4a\xcf\x9f\xc4\xf1\x57\xcf\xf7\x51\x57\xa5\x23\x17\x54\xd5\x8c\xdc\x4e\x61\xc1\xf0\xbd\x23\x11\x46\x97\x7c\x42\x35\x56\x6a\x0a\x4e\xb3\x5b\x98\x93\xfc\x66\x29\x45\xc3\x8b\xc9\xbe\x3d\xb6\xb4\xc5\x62\xf1\xfc\x13\xdd\xd8\x33\x61\xbc\x70\x9c\xe4\xe7\xa7\xf0\x84\x56\xa6\x0a\x12\xee\x24\x01\xfa\x4c\x93\x4a\xfc\x7b\xc2\x28\x47\x22\x27\x4b\x49\x0a\x8a\x5c\x0f\xb5\xa8\xc7\x9d\x78\xfc\x95\x19\x3f\x4d\xe6\xe7\x27\x90\x9c\x98\xc9\xd9\x49\xf2\xec\x3c\x86\x63\xbb\xf2\x94\x24\xa7\x4f\x09\x9c\x9c\x99\xc9\xb3\xf3\x24\x7e\x9a\xc0\xd9\x91\x99\xcc\x31\x26\x67\xa7\xf0\xf4\x99\x99\x60\x11\x1f\x9d\x9e\xc3\x33\xcb\xb6\x78\x16\xc7\xa7\x27\xd6\xb9\xa3\x8f\xc0\x5b\xe3\xfc\x86\xea\xff\x63\x84\xbb\xc8\x60\x2e\xb4\x16\xd5\xff\x10\xdf\x82\x32\x8d\x72\x0a\xb5\x14\x4b\x5a\x4c\x2f\x7f\xb9\xaa\xc8\x12\xdf\x48\xc2\xd5\x42\xc8\x2a\x7c\x45\x73\x29\x94\x58\xe8\xb0\x83\x0d\x4a\x13\xa9\x2f\x4c\x08\x2a\x2d\xb3\x43\x8f\xfd\x70\x0c\xc8\x8b\x1e\xd9\x19\x3e\x1c\x7f\xef\x05\xdf\xdc\xd6\x98\xc5\x30\xea\x65\x95\xb1\x2a\x51\x29\x9f\x4e\xb5\x50\x54\x53\xc1\xa7\xa6\xd6\x13\x4d\x57\xb8\x8f\x57\xd5\x84\xef\x08\x90\xb9\x12\xac\xd1\xf8\x20\xd5\xe6\x4c\xe4\x37\x8e\x66\xaf\xf0\x7e\x9a\xfa\x24\x5a\x97\xd4\x8b\x81\x35\x04\xb5\x44\xaf\x1e\x6a\x52\x14\x94\x2f\xa7\x70\x56\xfb\x8c\x85\x8a\xc8\x25\xe5\x53\x88\x37\x22\x69\xd4\x16\xb8\x34\x72\xdd\xca\xc1\x20\x9d\x8b\xe2\xd6\x56\xd7\x82\xae\x20\x67\x44\xa9\x2c\x78\x50\x44\x6c\x17\xb2\xc5\x60\x9a\x0f\x42\x79\xbb\xb4\xb5\x26\xc5\x3a\x00\x6b\x28\x0b\x1c\x88\x89\x8b\x9e\x29\x24\x06\x9e\x17\x79\xa0\x8f\x4d\xd8\x72\x92\x1c\xb5\x8b\x83\xb4\x4c\x5a\x25\x1a\xdf\xeb\x89\xad\x40\x5d\xed\x31\x85\x9b\xee\xef\x64\xca\xa4\xd5\x1f\x15\x74\xe5\xe1\xf5\x86\x1f\x46\xaa\x45\x3d\x85\xe3\xa3\x0f\xc0\x54\xd5\xe4\x34\x98\xa5\xb4\xa5\x2d\x08\x2c\xc8\xa4\x20\x9a\xcc\x89\xc2\x00\x88\xa4\x64\x52\xd2\xa2\x40\x9e\x05\x5a\x36\xe8\xb0\x42\x6a\xc3\x81\x16\x46\x0b\xe5\x96\xd7\xdc\x3e\x35\xe1\x33\x68\x29\x3d\x9c\xfb\xec\x1e\x7f\x9e\x5d\x1b\x63\x1b\xa3\x76\xaa\x76\xbd\xe4\xc6\xa5\x8c\xda\xe1\x82\x22\x2b\x14\xea\x16\x18\xc3\x25\xf2\x62\xf6\x8a\x72\x0d\x5a\xdc\x20\x57\x69\xe4\x69\x2d\x07\x99\x23\x83\x85\x90\x59\xb0\x34\x37\x19\x17\xf2\x57\x92\xe7\xa2\xe1\x3a\x98\x7d\xef\x29\xe0\x29\x53\x48\x23\x2b\xd0\x4a\x77\x80\x3b\x59\x85\x0c\x73\x2d\x64\x07\xfe\xc0\xb3\x9a\xd4\xef\x22\xa6\x67\xb5\xa2\x5c\xff\x4a\x8a\xc2\xe4\x61\x30\x7b\xe1\x06\x0f\x0d\x0d\x52\xca\xeb\x46\x83\x36\xf9\x6e\xa3\x2c\xf0\x5d\xf6\x96\xb8\x85\xb2\x45\x89\x1e\x37\x59\xb9\x3d\xbe\xa8\xf6\xed\xec\x63\x06\x9d\x70\xcf\x9e\x23\x3c\x6e\xae\xe1\x54\x07\xb3\x9f\x39\xd5\xd3\x87\x96\x9c\xcb\x1e\x33\x65\x05\x37\x86\x9c\x1e\x2f\x3a\x48\x45\x6d\x6a\x15\xac\x08\x6b\x30\x0b\x92\xf3\x60\x56\xbd\x31\xe7\x9c\x46\x6e\xe5\x31\xce\xb8\x65\x84\x35\xd2\x87\xcc\x69\xe4\x20\x75\xf3\x79\xa3\xb5\x70\x07\x5d\x4b\x51\x0b\x85\x26\xa2\x28\x5f\x06\xb3\xd7\x6e\x9e\x46\x8e\xa7\x4b\x68\x77\xdc\x7e\xb6\x89\xd0\x41\xaa\xc9\xdc\x37\x6e\x76\xd6\x3e\xc5\xfc\x54\x76\x63\xb3\x36\xbb\xba\x4c\x23\x5d\x6e\xd3\x7c\x88\xec\x59\xb0\x67\xb0\x4b\xff\x49\x13\xdd\xec\xe3\xcf\xcd\xa6\xb7\x17\xd2\x68\x03\xc1\x2c\xf4\xd0\xa5\xda\xd4\xdf\xee\x24\x7e\xa0\x6a\x73\x10\x69\xa4\xdb\xe2\xec\x66\x9b\x4d\xa6\xd1\x56\x52\x76\x49\xbc\x49\xe1\xb6\x59\x76\x01\x40\xea\x9a\xd1\x9c\x18\x68\xd1\x35\x59\x11\xb7\x18\x6c\xb7\xd2\x0d\xaf\x6f\x96\xb6\x7f\x96\x48\x72\xfd\x6d\x72\x16\xc6\x61\x1c\x35\x55\xe1\x08\xe6\x66\x2b\x1a\xbb\xbf\x0f\xf6\xe7\x9f\x6e\x72\x52\x88\x6a\xc7\xac\x21\xfe\x57\x4d\xcf\x4d\xe2\x4c\x94\x26\xbc\x20\x4c\x70\xfc\xf6\x2c\x3c\x3a\x0b\x63\x47\xdf\xf7\x4a\xe8\xdb\x32\xa9\xe5\x38\xdd\xb9\xad\x88\x04\x85\x72\xe5\x1b\x64\x33\xf5\x75\x4e\x41\x06\xff\xfc\xd7\x73\x1b\xb2\x51\x04\x97\xb8\xa0\x1c\x81\x40\x85\xba\x14\x05\x68\x01\x12\x73\xc1\xb9\x49\xdb\xa6\x16\xdc\xab\x01\x26\x94\x6a\x55\x6d\x38\x32\x58\x34\xdc\x3a\x64\x38\xf2\x5d\x80\xe7\xcf\x80\xe3\x1a\xde\xe2\xfc\x27\x91\xdf\xa0\x1e\x0e\x87\x6b\xca\x0b\xb1\x0e\x99\x70\x3e\x31\xce\xd4\x22\x17\x0c\xb2\x2c\x03\xef\x90\x60\x04\xdf\x40\xb0\x56\xc6\x35\x01\x4c\xcd\xd0\x8c\x46\xf0\x35\x3c\x14\x2f\x85\xd2\xf0\x35\x04\x11\xa9\x69\x30\x72\x1b\xf2\xc6\x43\xc1\x2b\x54\x8a\x2c\xb1\x0f\x10\x57\xc8\x75\x8b\xd2\xee\xa3\x52\x4b\xc8\xe0\xaf\x3f\xfd\xf8\xb7\xb0\x26\x52\xa1\x63\x09\xcd\x6d\xe6\xda\xae\xc1\x80\x2e\x60\x68\xd9\xb2\x0c\x78\xc3\x58\x27\x3f\x90\xa8\x1b\xc9\x3d\xdb\xfd\xc1\x16\x7b\x68\x6f\x35\x78\x92\x65\xd0\xf0\xc2\xba\xb8\xd8\x48\x7e\x39\x0c\xbe\x70\xb7\xe0\x28\x34\x07\xb7\x91\x18\x75\xea\xb6\xb4\xb5\x17\xf3\x87\x14\x76\xd7\x79\x4f\x67\x4b\x7b\x44\x6d\x17\x11\x8f\xa8\xed\x45\x4c\x9f\x7d\xbf\xb2\xb6\x6e\x3c\xa6\x2c\x17\x5c\x69\x60\x86\x23\x03\x03\xb8\x2b\x34\x2d\xba\x41\x5f\x4d\xb8\x10\xf2\x25\xc9\xcb\xe1\xe6\xf8\xb8\x96\xb7\x1b\x7d\x5e\x21\xb2\x07\xea\x26\xc1\xd7\x96\x33\xa4\x45\xa7\xd8\x82\x44\x16\x32\xe4\x4b\x5d\xc2\x0c\xe2\x9e\x1e\xb7\x68\x45\x72\xc1\x17\x54\x56\x58\xc0\x93\x0c\x90\x85\x25\x51\x17\xa6\xcd\x19\x06\xdd\x4a\x30\xea\x8b\x0e\x90\x85\x12\x6b\x46\x72\x7c\x4b\x75\x39\xac\xdc\xd5\x61\x70\xbc\x64\x68\x9e\xf8\x57\x1a\x2b\x0f\x7d\xd4\x89\xdd\xb7\xa3\x7b\x40\xa6\xb0\xa7\xd0\xf8\x27\x24\x75\x8d\xbc\xf8\x9d\xca\x5a\x5d\xf7\xa3\xcf\x0b\x06\x94\x52\xc8\xc7\x0e\x8f\x0b\x7d\x3b\xbc\x63\xe4\x56\x34\x7a\x0a\x87\x5a\xd4\x17\xb6\x03\x3e\x1c\x83\xd1\x3f\x85\x4e\xc3\xd8\x16\xa4\x29\x1c\xda\x99\x59\xa7\x15\x5a\xa9\xd3\x38\x8e\xc7\xd0\x3e\x4b\xbe\x23\x72\x0a\xa6\x3f\xbc\x7f\x04\x8f\x6a\xf2\xdc\x3c\x5f\x3e\x07\x91\xd7\xd1\x61\xf2\xf3\x3f\x8e\xea\x7e\xbb\xb8\xe4\x4c\x28\x7c\x50\xfb\x40\xa1\x7e\xe3\xb4\x0e\xbb\xfa\x38\x86\xe3\x38\x8e\x47\xcf\xe1\x7e\xf3\x32\x8b\x22\x78\xa9\xcc\x25\x4a\x55\x09\x04\xd6\x38\x57\xb6\x42\x82\x97\x31\x9d\x8c\x16\xa0\x4b\x84\x17\xaf\xaf\x7c\xf9\x3d\xb0\x05\xc7\x73\x0c\x7d\xb5\x33\x27\xfd\xa0\x67\x19\x85\x39\xa3\xf9\x4d\x2f\x6b\x5a\x97\x61\x58\x4b\x5b\xde\x2e\x71\x41\x1a\x66\x95\x6c\xd2\xa8\xed\x71\x7d\x32\xed\xb4\xcb\xa3\x70\x45\xd8\xb6\x48\xbf\x17\xed\xe5\x60\xd7\x9e\x3e\x2a\x62\x5b\x99\x2d\x89\xea\x83\x36\x4c\x5b\xd8\x67\xb7\x6d\xe2\x16\xb3\x3f\x18\x65\xb2\xc6\x56\x73\xa5\x25\xe5\x4b\xba\xb8\x1d\xfa\x78\x21\xb9\x7b\xf7\xda\xf6\x26\x18\x3b\x62\xbb\x4b\x3f\xed\xa3\xdf\x22\x59\x78\x7d\x8a\x41\xe0\xe2\x62\xe4\x9f\xe7\x23\x7b\x20\xad\xd7\xe1\x83\xa9\x0b\x77\xbd\x1d\x72\x5c\xbf\x74\x25\xec\x5d\xaa\xe5\x56\x07\x36\xf9\xf2\xae\xad\x64\xf7\xe6\xf2\xd7\x72\xf6\x6e\xd4\x13\x5d\x48\x51\xbd\x45\x6a\x9c\xef\xeb\x97\x77\x6d\x04\x49\x18\x63\x72\x3e\x0a\xb5\xf8\x0b\x7d\x8f\xc5\xf0\xc8\xe1\x1b\x58\x6b\x6d\x7d\x79\x97\xea\x62\xd6\xb3\x91\x46\xba\x68\x2d\x3c\xce\xa8\xc5\x47\x19\x5b\x60\xf7\x30\x6c\xa5\x1c\xb2\xfb\x51\x5f\x74\x4f\xdd\xed\xf2\x7b\x57\xed\x45\xcb\xd3\x57\xb1\x87\xaf\xbf\xbc\x5d\x5e\x77\x79\x5f\x23\x2f\x28\x5f\xb6\x22\x07\xbd\x7b\xc5\x43\xfa\x81\xf2\x1b\x7f\x3a\xc4\x7f\x9f\xff\xc2\x9c\x05\x99\xbd\xf3\xa5\x35\xf0\xc0\x82\x51\x27\xde\x0a\x3e\xcc\xc5\xd1\xf6\x5d\xf8\x87\x72\xee\xf7\x04\x79\x2f\xcc\x3d\x8a\x5f\xfb\xe1\xbe\x13\xf0\x83\x01\x2d\xa6\xd0\x9e\xff\xb8\xbb\x48\xba\xda\x37\xea\x7b\x44\x17\x0e\x68\xe7\xe4\x76\xc7\xba\x68\x9d\xda\xdb\xfb\xbe\xf3\xd1\xc5\xa8\x57\x4d\x5d\xff\xe4\x12\xc0\x57\x47\xf3\x6b\xbf\x2b\x40\xfb\x3a\xb7\x1d\x05\xbe\xd7\xc8\x0b\x05\x7f\xb7\xed\xff\x85\xa8\x6a\xc1\x91\xeb\x7e\x1e\xc9\xc6\x3c\xcc\x87\xa6\x1a\xaa\x2e\x88\x54\x53\x63\x4b\xf3\x5b\xd2\x25\x55\xa1\xd2\x44\x9b\xf2\x7d\xd7\xf5\xc4\xd3\x4d\x77\xec\x2a\xb5\xc7\x68\x7f\xb4\x39\xc4\x4e\xa9\xd3\x80\xda\xbc\xbc\x70\xe8\x55\xcd\x60\x78\xb7\xab\xab\xf3\xa4\xef\x0e\xf3\x16\xf9\x25\x2d\x5e\x19\x8e\x07\x5a\xa9\xb9\xc0\x56\xc4\x94\x03\x85\xfa\xca\xcf\x86\xc3\x91\x31\x60\x39\x1c\x94\x31\x24\xf6\x56\xd9\x00\xdd\x56\xff\x96\x32\xf6\x33\xaf\xb6\x2d\xe4\x0c\x89\xec\x74\x6e\xd9\xdb\x46\x29\x91\x17\x28\x37\x82\xfe\x9c\x86\x1f\x7d\xd2\xef\x04\xf0\xf6\xd7\x93\xee\xcb\x4b\xd7\xec\xdc\x6d\x4e\xa3\x6b\x2e\xc3\x8a\xd4\xc3\xa1\x9f\xd9\x8d\x0f\x37\xdd\x56\xfb\xd0\xbf\xc1\xdb\xac\xf5\xf7\xbd\x7f\xf6\x77\xf3\x59\x37\xda\xf9\x50\x30\x18\x8d\xee\xf7\x7f\x07\xe8\x05\xa6\x73\x83\x8d\xb5\xcb\x1f\x5f\x85\xde\x1d\xee\xbd\xbb\x15\x96\xd1\xcc\xa5\x4c\x21\xf2\xc6\xfe\x37\x67\x89\x6d\xb5\xff\xee\xf6\xaa\x18\x1e\xee\x7c\x38\x3a\xb4\x66\xcc\xed\xed\x3e\x83\xb6\x0f\xc7\x34\x72\x2f\xec\x34\x72\xff\xd6\xfd\x4f\x00\x00\x00\xff\xff\xd4\xb6\x67\xb5\xe7\x1d\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa3, 0xc5, 0xc5, 0x71, 0x8f, 0xd1, 0xd2, 0x99, 0x28, 0xfa, 0x78, 0x82, 0xd0, 0xfe, 0xcd, 0x1c, 0x45, 0x65, 0x1e, 0xc0, 0x1d, 0x45, 0xcd, 0x35, 0x8f, 0x60, 0xec, 0x98, 0x93, 0x21, 0xc8, 0x99}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": {indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
