// Code generated by go-bindata. DO NOT EDIT.
// sources:
// static/index.html (2.882kB)
// static/scripts.js (5.795kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xcd\x8e\xdb\x36\x10\x3e\xef\x3e\x05\xa3\x20\x48\x03\x58\x12\xe5\xff\x55\x2c\x37\xc5\x26\x28\x72\x08\x9a\x43\x0a\xa4\xc7\x11\x35\x92\x68\x53\xa4\x42\x8e\xed\xb8\x45\xdf\xbd\xa0\xa4\x5d\x7b\x77\xd3\xb4\xd8\xa6\x68\x4f\xf6\xfc\x7c\xf3\xcd\x8c\xc8\x19\xae\x9e\xbc\xfe\xe9\xfa\xc3\x2f\xef\xdf\xb0\x9a\x1a\xb5\xbe\x5c\xf9\x1f\xa6\x40\x57\x59\x80\x3a\x58\x5f\x5e\xac\x6a\x84\x62\x7d\x79\x71\xb1\x6a\x90\x80\x89\x1a\xac\x43\xca\x82\x1d\x95\xe1\x32\x38\x19\x6a\xa2\x36\xc4\x4f\x3b\xb9\xcf\x82\x8f\xe1\xcf\x3f\x84\xd7\xa6\x69\x81\x64\xae\x30\x60\xc2\x68\x42\x4d\x59\xf0\xf6\x4d\x86\x45\x85\x67\x38\x0d\x0d\x66\xc1\x5e\xe2\xa1\x35\x96\xce\x5c\x0f\xb2\xa0\x3a\x2b\x70\x2f\x05\x86\x9d\x30\x62\x52\x4b\x92\xa0\x42\x27\x40\x61\x96\x04\xeb\x4b\x1f\x87\x24\x29\x5c\x6f\x85\x91\x9a\x5d\x1b\x4d\xd6\x28\xf6\x1e\x34\xaa\x55\xdc\x9b\x3a\x2f\x25\xf5\x96\xd5\x16\xcb\x2c\xf0\xb9\xba\x34\x8e\x45\xa1\x37\x2e\x12\xca\xec\x8a\x52\x81\xc5\x48\x98\x26\x86\x0d\x7c\x8e\x95\xcc\x5d\x4c\x07\x49\x84\x36\xcc\x8d\x21\x47\x16\xda\x78\x12\x4d\xa2\x45\x2c\x9c\x8b\x6f\x75\x51\x23\x75\x24\x9c\x0b\x98\x45\x95\x05\x8e\x8e\x0a\x5d\x8d\x48\x01\x8b\xd7\x8f\xe3\x2d\x8d\xa6\x10\x0e\xe8\x4c\x83\xf1\x34\x5a\x44\xbc\xa3\x3c\x57\x3f\x86\xd5\xe3\x5d\x54\x19\x53\x29\x84\x56\xba\x8e\x55\x38\xf7\x7d\x09\x8d\x54\xc7\xec\x9d\xb7\xa3\xb5\x40\xe9\x98\xf3\xd1\x84\xf3\xd1\x94\xf3\xd1\x8c\xf3\xd1\x9c\xf3\x2f\x33\x79\x2a\x27\xac\x6c\x89\x39\x2b\xfe\x76\x85\x9b\x4f\x3b\xb4\xc7\x78\x12\x25\x51\x32\x08\x5d\x45\x1b\x17\xac\x57\x71\x1f\x70\xfd\x8f\x62\x87\xda\xd0\x31\x1e\x47\xd3\x28\x89\x5b\x10\x5b\xa8\xb0\xb8\x61\xf2\xa6\xe8\x46\xf9\xcd\x78\xff\xec\xb4\x6c\xee\x1f\x96\x6f\x41\xd6\x98\x06\x35\x45\x1b\x17\x8f\xa3\x64\x19\xf1\x1b\xc5\xc3\xf8\x1d\x81\xff\x68\x9e\xea\xa2\x4e\x46\xac\x1e\x8f\x58\x3d\x61\xbf\x79\xf9\xa2\x3b\x54\xfd\x01\x48\xd9\xe9\x04\xbc\x3c\x19\x0f\x28\xab\x9a\x52\x36\xe6\xbc\xd3\xfe\xde\xc7\x19\xf0\x0d\xd8\x4a\xea\x30\x37\x44\xa6\x49\x59\x32\x6f\x3f\xf7\x58\xc2\xcf\x14\x82\x92\x95\x4e\x99\x40\x4d\x68\x4f\x68\xe8\xb1\xc2\x28\x63\x53\x76\xa8\x25\xe1\xc9\x28\x75\xbb\xa3\x11\x73\xa8\x50\xd0\x88\xe5\x3b\x22\xa3\xef\x00\x72\x05\x62\x7b\x02\x10\xe4\x0a\x87\x74\xba\x39\x91\xb2\x84\xf3\x67\x27\x07\x85\x15\xea\xe2\x6b\x9c\x91\xdb\x35\x0d\xd8\xe3\xdd\xa2\xc8\xb4\x29\x9b\x8c\x87\x8a\x7a\xc7\x3d\x5a\x92\x02\x54\xd8\xd7\x74\x03\x90\x3a\xac\x87\x3e\xdd\x72\xdf\xd7\xee\xeb\x5e\x5d\x48\xd7\x2a\x38\xa6\xac\x54\x38\x34\xab\xeb\x53\x28\x09\x1b\x77\xa7\x5b\x17\x39\x88\x6d\x65\xcd\x4e\x17\xe1\x90\xf9\xd3\xa4\xe4\x93\x49\xf1\xf2\xbc\x9a\xa7\x65\x59\xbe\x7c\xe4\xe7\x3c\xa3\x48\xd9\xd3\xd9\x24\x11\xcb\x19\x7b\x22\x1b\x3f\x8d\x41\xf7\x48\xc6\xce\x9d\xc2\xc6\xfc\x1a\x2a\xa9\x11\x6c\x58\x59\x28\x24\x6a\xfa\x8e\x4c\x3b\xba\x85\xf3\x67\xfe\xff\x22\xc9\x97\x53\x96\x4c\xbd\x30\x9f\x26\x57\x4b\xce\x26\x9d\x65\x01\xc9\x6c\x01\x6c\x3a\xf7\xc2\xd5\x32\xe1\x8b\x84\xcd\xc7\x5e\xc8\x91\xc3\x7c\xc6\x16\x57\x5e\xc0\x82\x8f\x67\x4b\x76\xd5\xb9\x95\x57\x9c\xcf\xa6\x5d\x73\x5f\xfc\x45\x7a\x07\xcc\xb7\x92\xfe\xc7\x19\x3e\xcc\x8c\xf5\xf7\xe7\x3f\xcc\xaf\x94\x8a\xd0\xa6\xac\xb5\xa6\x92\x45\xfa\xfa\xe3\xdb\x06\x2a\xfc\x60\x41\xbb\xd2\xd8\x26\x7a\x27\x85\x35\xce\x94\x14\xdd\xa6\xcd\x1c\x81\xa5\x6b\x7f\x04\x1d\xd9\xec\xf9\x90\xfb\xf3\x11\x43\x5d\x9c\xa9\x7b\xe2\xe7\xa3\x1f\x07\xe0\x87\x63\x8b\x19\x67\x2f\xce\x6e\x95\x67\xb5\xe8\xdc\x70\x9d\x5a\xe3\x24\x49\xa3\x53\xbf\x73\x80\xe4\x1e\xbf\xe4\xeb\x5a\xd0\x0f\x00\x90\x3b\xa3\x76\xc3\xdd\x3e\x5d\xb5\x5c\x99\x61\x64\x3c\x18\x11\x0f\x47\x02\xeb\x88\x58\x6b\x6f\xa6\x0a\x6b\xa1\x28\xa4\xae\x52\x76\x3b\xde\x58\x3f\x23\x52\xc6\x4f\x90\x55\x7c\x33\x68\x57\x71\xff\x6a\xba\xbc\x58\xe5\xa6\x38\x76\x53\xbe\x90\x7b\x26\x14\x38\x97\x05\xf7\x86\x48\xc0\x64\x91\x05\xa2\x7f\xb9\xf4\x4f\xa3\xb8\x90\xfb\x3b\xdb\x95\x7c\xd3\x02\x68\x5b\x25\x05\xf8\x52\xe3\x0d\xec\xa1\x37\x06\x77\x57\xc7\x4e\xb7\xdb\xaa\xdb\x17\x16\x41\xd0\xab\x64\x1e\xf1\x88\xc7\xbb\xa6\xe8\x15\xbe\x83\xc5\x4e\xf8\x20\x5f\xdd\x47\x8f\xa7\x0c\x0b\xd3\x3c\xa0\xf5\xca\x7f\x95\x3a\x87\x1c\x55\xe8\x08\x74\x01\xca\x68\x7c\x35\x8f\xc6\xf3\x88\xf7\xfa\x2f\x6d\xc5\x73\x2e\xbf\xae\x7a\xcf\x21\xfe\xe0\xea\xee\xe7\xb8\x8a\xfb\x2f\xba\x8a\xfb\x17\xf3\x1f\x01\x00\x00\xff\xff\x2e\xd8\xcf\x3e\x42\x0b\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6f, 0x9e, 0xb5, 0x9e, 0x38, 0xf4, 0x7d, 0xf4, 0xef, 0x54, 0x2f, 0x96, 0xf0, 0x8d, 0x1c, 0xbd, 0x66, 0x70, 0x9f, 0x8f, 0xfe, 0x10, 0x9d, 0x9a, 0x7f, 0xd4, 0x86, 0xeb, 0x47, 0xc4, 0x26, 0x66}}
	return a, nil
}

var _staticScriptsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x51\x8f\xdb\x36\x12\x7e\xf7\xaf\x98\xea\x80\x44\x46\x77\x25\x6f\x8b\x02\x85\xd7\xd2\x21\xdd\xed\x1d\x7a\xb8\x5c\x83\xa6\x45\x1e\x82\x20\xa0\xa5\xb1\x4d\xac\x44\x0a\x24\xb5\x8e\xe1\xea\xbf\x1f\x48\x91\x12\x69\xcb\xee\x16\xed\x9b\x39\x9c\xf9\x38\x1c\x0e\x3f\x7e\x72\x51\x11\x29\xe1\x2d\x65\xea\xbf\x54\xaa\x1f\x99\x12\x07\xc0\x2f\x0a\x59\x29\xe1\x17\x24\x85\x4a\x1e\x78\xdd\x70\x86\x4c\xc1\x71\x06\x50\x70\x26\x95\x68\x0b\xc5\x45\xdc\x08\xde\xc8\xb9\x31\x03\xc8\xb6\x41\x67\xba\x37\x16\xb5\xa3\x32\xe1\xec\x81\xb3\x0d\x15\x35\x64\x27\x86\x64\x4d\x59\x19\x6b\x9b\xf1\xef\x66\x00\x02\x59\x89\x22\x76\x90\x02\x55\x2b\x18\xc4\x66\x00\xb0\x52\x22\xb7\x3f\xf5\xa0\xcc\x8f\x06\xd0\x2c\x99\xa0\xce\x3c\xa1\x65\xb7\x4a\x55\xf9\x47\x6e\x8a\x4f\xb9\xc5\x67\x7e\xa4\xe6\x2d\x53\x90\xc2\x5d\xb2\xc0\xbb\xef\xe7\x89\xe2\xff\xa2\x5f\xb0\x8c\xbf\x99\x77\x10\x9f\xe3\xf6\xfe\xdd\xfc\x25\x39\x14\x7d\x15\xb0\x84\x7f\x42\xf4\xe0\x06\x11\x2c\x21\x7a\x87\xac\xa4\x6c\x1b\x4d\x24\x39\x0c\x00\x8e\x5f\x5d\xc1\x7c\xf5\xca\xf3\x04\x58\x11\xd8\x09\xdc\x64\xd1\x3f\x22\xe0\xec\xa1\xa2\xc5\x53\x76\x0c\x8f\xa3\xcb\xed\x8f\x55\x4a\xfc\x65\xba\x71\xfd\x20\x9b\xd9\x60\xb4\xa7\x32\x9c\xe2\x00\x19\xa3\x3b\x49\x4c\x1a\x81\xcf\xc8\xd4\x23\x6e\x48\x5b\xa9\x78\x3e\x76\x48\xbf\x01\x89\xac\x7c\x24\x8a\xc4\x47\x0b\x4c\x0a\x45\x39\x5b\x42\x64\x37\xf5\xb9\xa6\x4c\x45\x37\x76\x76\xcb\x9f\x51\x30\x2e\x96\x3e\x86\x33\x3a\x27\x5a\x06\xd3\xae\x45\xfa\xe9\x6e\x6e\xd2\xed\x66\xb3\xf1\x0a\x50\xb6\xfd\x3b\x9a\x7f\xdc\x9b\x54\x44\x21\x64\x70\x3c\x4b\x3b\x1a\xb6\x42\xca\x52\xa0\x94\x81\xc9\xf4\x91\x6f\x69\x19\xd5\xe3\xbb\xef\xad\xa5\x1b\xd7\xd8\x11\x56\x56\xf8\x6f\x8b\xfc\xb0\x23\x6c\x8b\xee\xb2\x4d\xcd\x9d\xdc\xbb\x00\xe5\x4d\x9f\xcb\x14\x48\x30\x75\x15\xc3\x24\x3f\x09\xe1\xcd\x5c\x43\xf8\x8d\xd1\xc9\xf8\xd1\x7e\x2d\xfa\x9d\xe0\x0d\x97\xa8\xcf\x33\x0c\xf7\x26\xce\xb8\xc7\x1c\xae\x3d\xea\x0f\xb4\xaa\x7e\xc1\x02\xe9\xb3\x09\x91\x31\xc3\x2f\xea\x9d\x7f\xdc\x74\x03\xf1\x78\xbe\x43\xdf\x41\x96\x41\x14\xc1\xab\x57\x30\x44\x24\xa4\x28\xf4\xa6\x65\x52\x21\xdb\xaa\x1d\xe4\xb0\x98\x0f\xed\xd0\x63\xa0\x7a\xaf\x61\xe2\xa3\xd7\x1e\xe7\x00\x1f\x17\x9f\xa0\xb3\xbb\xed\x5c\xce\x7f\x40\x98\x1b\x8a\x55\x29\x51\x79\x1c\x52\xe1\x16\x59\x99\x9b\xea\x28\xfe\x84\x4c\xae\x52\x6b\xf3\x9c\xc8\x1a\x2b\xd8\x70\x91\x45\x2e\xa5\xcf\x36\x8f\x28\x77\xdd\x04\xd6\xb2\x84\x55\x6a\x02\xf2\xd9\x88\x20\xb1\xc2\x42\x81\x3a\x34\x98\x45\x0a\xbf\x28\xc3\x3b\xe6\xec\x2c\xf1\x4c\xb5\x66\x07\xcf\xa4\x6a\x9d\x47\x58\xdc\x2e\xe0\x3e\x9f\xab\x5d\x85\x7e\xff\xfd\xe3\xa7\x79\x52\x93\x26\x8e\xad\x69\x0e\x59\x3e\x54\xc3\x66\xc6\x1b\xcd\x2b\xf0\x84\x87\xec\x68\xdd\x86\x65\xdd\x38\x1f\x7e\xad\xd2\xde\xdf\x5f\x7c\x3e\xf7\x39\xb1\xdf\xa9\xbf\xf7\x0d\x17\x35\x70\xf6\xbe\x5d\xd7\x54\x05\xbb\xf5\x3a\x30\xd8\x8e\x5f\x70\x4d\x73\x9f\x2d\x27\x44\xf9\x1b\x47\x0e\x43\x8d\xbd\x28\xca\x9a\x36\xac\x31\x2d\x4f\x00\xa6\xab\x1e\xdc\xe5\xa9\xa2\xdb\xf0\x2e\x0d\xd6\x5b\x8b\xf4\x7a\xd6\x75\xdf\x21\x6f\xea\x93\xbe\x78\x61\xce\x7d\xf8\x85\x94\x3d\xee\x98\xcc\xb8\x7f\x7a\xff\x5c\xc2\x9a\x55\xa3\x5c\xd3\xca\x72\x2a\xd7\x89\x26\x1e\x92\x35\xa1\xd3\xa9\x8e\x34\x35\x95\xa8\x0e\x0c\x0e\x7f\xec\xc9\xde\x59\x93\x7c\x5e\xff\xaa\xef\xe6\x54\xf7\x9d\xb9\x2f\x9c\x37\xec\x91\x4e\x45\x8c\x3d\x7a\xa5\x34\xeb\x56\x29\xce\x72\xdb\xa1\xab\xd4\x8e\xbd\x46\xd7\x6d\xed\xb7\xf9\x4e\x23\x78\xe2\x84\xac\x2b\x0c\x20\xd5\x0e\x49\x79\x92\xba\x2f\xe1\x06\xb7\xfc\xa7\xc7\x55\xaa\x76\x53\x33\xb6\x53\x2f\x4e\x9b\x53\xbf\x34\xab\x69\xb5\xbd\x1c\x6b\x04\xc6\xc4\xf4\x28\x69\x86\xf1\xe9\x4e\x56\x6a\xcd\xcb\x43\x18\x16\x70\x52\x6d\x05\xb5\xc7\x49\x46\x7e\x4c\x30\x12\xc0\x2a\x94\xdf\x86\x9a\x06\x3d\x0b\xe6\x97\x35\x74\xc3\x13\x31\xcd\x91\xe0\x64\x54\x76\x9c\xd0\x56\x1d\xa4\x61\xca\x3e\x93\x99\x7d\x86\xbb\x5a\xa5\xc1\xa1\xae\xd2\xf0\x3d\x99\x5b\xbd\x37\xc5\xe4\xa3\xf4\x3b\x79\xe3\xc6\x27\x0e\x13\x45\xc4\x16\x55\x62\xfa\xb8\x0b\xd1\x02\x86\xba\x08\x36\x48\xa7\xeb\x58\x1e\x75\x5c\x86\xb2\x9c\x75\x15\x69\xbc\xd9\x17\x71\x7a\xa1\x36\x89\x32\xc0\x78\xcf\xc0\x35\x89\x7c\xff\x72\x8d\x7c\x4d\x1b\x87\x2d\xe2\x9c\xfc\x57\x22\x70\xb4\xb6\xd0\xcf\x16\xe7\x8c\x6f\x03\xaf\x7e\xeb\x27\x54\x37\xa9\xb5\xdf\x34\xcd\xdf\xfa\x91\x79\x2a\xb3\x9d\x22\x58\xc2\xc7\x4f\x2e\xc5\x82\x53\xb6\x26\x12\x7d\x55\xbd\xae\x78\xf1\xb4\x84\x85\xd5\xd4\xe7\x52\xf0\x91\x96\x6f\x35\x52\x1c\x9c\xb6\xc0\x82\x33\x86\x45\xff\x19\xa3\xdb\xe3\x54\x3e\xfe\xc6\xea\xf3\xb0\xbd\x4c\x8a\x8a\x4b\x0c\x4e\x76\x2f\x21\x83\x96\x95\xb8\xa1\x0c\xcb\xfb\x51\xd8\x0d\x4b\x84\x10\x90\x01\xc3\x3d\x7c\xc0\xf5\x7b\x5e\x3c\xa1\x8a\xe3\x78\x4f\x59\xc9\xf7\x49\xc5\x0b\xa2\xdb\x41\x37\x8b\xe2\x05\xaf\x20\xd3\x7a\x74\xa7\x54\x23\x97\xd1\x5c\x7f\x66\xee\xa5\x5c\xa6\xa9\xf9\xc6\xdc\x9b\x5f\x73\xf8\x1a\x4e\xc3\x77\x5c\x2a\xf8\x1a\xa2\x94\x34\x34\x0a\x53\x4d\x38\x33\x3b\x80\x0c\x62\xc3\x64\xae\xe0\x12\xd5\xaf\xb4\x46\xde\xaa\x38\xac\x90\x27\xb4\x6f\xe0\xdb\xc5\x62\xe1\x14\xec\x29\x6e\x8d\x52\x92\x51\xf0\x73\xf6\x41\xbe\xed\x4d\x1e\x84\xab\x8e\x37\x1b\x9b\x3b\xe3\x8a\xf4\x4c\x04\xd4\x72\x0b\x19\xfc\xe7\xfd\xcf\xff\x4b\x1a\x22\xa4\xf5\x48\x4a\xa2\x88\x5d\x5c\xcb\x77\xe3\x95\x65\xc0\xda\xaa\x1a\x05\x79\x2f\xa0\x9d\xc8\xf6\x9d\x13\xd3\x2b\xf0\x55\xe6\x9d\xd6\x45\x21\x6f\xfb\x6a\x08\xf3\x75\xfb\x88\xe8\x3a\xf2\x85\xa0\x63\x03\xfb\xc1\xd3\xd0\xee\x02\xbc\x10\x7a\xbc\x2f\x7e\xf0\x34\xb4\x7b\xd9\x5e\x08\xed\xdc\x7b\x68\x37\x9a\x86\x46\x21\xb8\xb8\x84\xcb\xb8\x3a\xc4\xc7\x8a\x1c\x78\xab\x96\xf0\x5a\xf1\xe6\x01\x99\x42\xf1\xfa\x06\xb4\x34\xeb\xf1\x0d\xc2\x8d\x51\x6c\x4b\x78\x6d\x46\x7a\xbe\x6f\xcd\x25\x7c\xb7\x58\x2c\x6e\xa0\x11\x7c\xab\x29\xee\x07\xa2\x29\x52\xb4\x17\x6a\x28\xdb\xa2\x40\x79\xb1\x84\x2f\xca\xc7\x62\x0c\x19\xd9\xf1\x9f\xcc\xc9\x74\xe2\x40\xfe\xa6\x91\x4f\x78\x45\x4f\xc6\xa6\xe5\xa5\x12\x94\x6d\xe9\xe6\xd0\xfb\xcd\xef\x5f\xf8\xa9\x58\xd2\x67\x30\xe4\x9c\x45\x05\x67\x8a\x50\x86\x22\xf2\xa4\x80\x37\x2f\xf8\x3e\x0a\xc4\x50\x10\x5b\xdd\x56\xdb\xdb\xbb\x6f\xa2\x13\x4d\xb5\xbb\xcb\x9f\x74\xcf\xc2\x03\x67\x4a\xf0\x0a\xde\x11\x86\xd5\x2a\xdd\xdd\x85\x52\xab\xa4\xcf\xbe\x00\x09\x87\x61\x12\x20\xdb\xba\x26\xe2\x70\x35\x19\x59\xdf\x7e\x17\xe5\x2b\xea\x6c\x1b\x02\x1b\x72\xab\x6b\xa3\x6f\x4f\x04\x44\x50\x72\xbb\xa3\x65\x89\x2c\x8b\x74\xe1\xa3\x7c\x95\xd2\x1c\x7c\x79\x35\xdc\xb5\xe1\x11\x39\x49\x6c\x72\xd9\x6f\xff\xea\xb2\x3d\x75\xf4\x8f\x94\x9c\xae\xcc\x45\x35\xee\xfe\xcd\x72\x77\x39\xfc\x56\x72\x17\x1c\xdc\x7d\x0c\xa6\x87\x4b\x7a\xaa\x26\xdd\xd0\x63\x64\x4f\x52\x7a\x19\x0e\xcf\xbd\x79\xdc\x1f\x7f\x7e\x9b\xd8\xee\x9b\x01\xac\xf4\xe3\x9f\xe6\xfa\xc9\x2d\x79\xd1\xd6\x9a\x9b\xb7\xa8\x7e\xac\x50\xff\xfc\xe1\xf0\x53\x19\xbf\x2e\xfa\x1e\x79\x3d\x9f\xcd\xef\x67\xb3\xff\x07\x00\x00\xff\xff\xdd\xe7\xec\xad\xa3\x16\x00\x00")

func staticScriptsJsBytes() ([]byte, error) {
	return bindataRead(
		_staticScriptsJs,
		"static/scripts.js",
	)
}

func staticScriptsJs() (*asset, error) {
	bytes, err := staticScriptsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/scripts.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x31, 0x92, 0x44, 0x8, 0xaa, 0x50, 0xf1, 0xd1, 0xad, 0x45, 0x32, 0xd0, 0xbf, 0xb9, 0x8d, 0x9a, 0xe2, 0x76, 0x27, 0x6f, 0xdf, 0x50, 0x81, 0xc, 0x81, 0x73, 0xde, 0xf8, 0xfc, 0x17, 0xb0, 0x6d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,

	"static/scripts.js": staticScriptsJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": {nil, map[string]*bintree{
		"index.html": {staticIndexHtml, map[string]*bintree{}},
		"scripts.js": {staticScriptsJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
