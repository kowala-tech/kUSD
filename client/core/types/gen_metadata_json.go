// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"

	"github.com/kowala-tech/kcoin/client/common"
	"github.com/kowala-tech/kcoin/client/common/hexutil"
)

var _ = (*MetadataMarshalling)(nil)

func (m Metadata) MarshalJSON() ([]byte, error) {
	type Metadata struct {
		NChunks hexutil.Uint64 `json:"nchunks" gencodec:"required"`
		Root    common.Hash    `json:"proof"   gencodec:"required"`
	}
	var enc Metadata
	enc.NChunks = hexutil.Uint64(m.NChunks)
	enc.Root = m.Root
	return json.Marshal(&enc)
}

func (m *Metadata) UnmarshalJSON(input []byte) error {
	type Metadata struct {
		NChunks *hexutil.Uint64 `json:"nchunks" gencodec:"required"`
		Root    *common.Hash    `json:"proof"   gencodec:"required"`
	}
	var dec Metadata
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.NChunks == nil {
		return errors.New("missing required field 'nchunks' for Metadata")
	}
	m.NChunks = uint(*dec.NChunks)
	if dec.Root == nil {
		return errors.New("missing required field 'proof' for Metadata")
	}
	m.Root = *dec.Root
	return nil
}
