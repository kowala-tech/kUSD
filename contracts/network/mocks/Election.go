// Code generated by mockery v1.0.0
package mocks

import accounts "github.com/kowala-tech/kcoin/accounts"
import common "github.com/kowala-tech/kcoin/common"
import mock "github.com/stretchr/testify/mock"
import network "github.com/kowala-tech/kcoin/contracts/network"
import types "github.com/kowala-tech/kcoin/core/types"

// Election is an autogenerated mock type for the Election type
type Election struct {
	mock.Mock
}

// Deposits provides a mock function with given fields: address
func (_m *Election) Deposits(address common.Address) ([]*types.Deposit, error) {
	ret := _m.Called(address)

	var r0 []*types.Deposit
	if rf, ok := ret.Get(0).(func(common.Address) []*types.Deposit); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Deposit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsGenesisValidator provides a mock function with given fields: address
func (_m *Election) IsGenesisValidator(address common.Address) (bool, error) {
	ret := _m.Called(address)

	var r0 bool
	if rf, ok := ret.Get(0).(func(common.Address) bool); ok {
		r0 = rf(address)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsValidator provides a mock function with given fields: address
func (_m *Election) IsValidator(address common.Address) (bool, error) {
	ret := _m.Called(address)

	var r0 bool
	if rf, ok := ret.Get(0).(func(common.Address) bool); ok {
		r0 = rf(address)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Join provides a mock function with given fields: walletAccount, amount
func (_m *Election) Join(walletAccount accounts.WalletAccount, amount uint64) error {
	ret := _m.Called(walletAccount, amount)

	var r0 error
	if rf, ok := ret.Get(0).(func(accounts.WalletAccount, uint64) error); ok {
		r0 = rf(walletAccount, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Leave provides a mock function with given fields: walletAccount
func (_m *Election) Leave(walletAccount accounts.WalletAccount) error {
	ret := _m.Called(walletAccount)

	var r0 error
	if rf, ok := ret.Get(0).(func(accounts.WalletAccount) error); ok {
		r0 = rf(walletAccount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MinimumDeposit provides a mock function with given fields:
func (_m *Election) MinimumDeposit() (uint64, error) {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RedeemDeposits provides a mock function with given fields: walletAccount
func (_m *Election) RedeemDeposits(walletAccount accounts.WalletAccount) error {
	ret := _m.Called(walletAccount)

	var r0 error
	if rf, ok := ret.Get(0).(func(accounts.WalletAccount) error); ok {
		r0 = rf(walletAccount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReportValidator provides a mock function with given fields: walletAccount, address
func (_m *Election) ReportValidator(walletAccount accounts.WalletAccount, address common.Address) error {
	ret := _m.Called(walletAccount, address)

	var r0 error
	if rf, ok := ret.Get(0).(func(accounts.WalletAccount, common.Address) error); ok {
		r0 = rf(walletAccount, address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Validators provides a mock function with given fields:
func (_m *Election) Validators() (types.ValidatorList, error) {
	ret := _m.Called()

	var r0 types.ValidatorList
	if rf, ok := ret.Get(0).(func() types.ValidatorList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.ValidatorList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidatorsChecksum provides a mock function with given fields:
func (_m *Election) ValidatorsChecksum() (network.ValidatorsChecksum, error) {
	ret := _m.Called()

	var r0 network.ValidatorsChecksum
	if rf, ok := ret.Get(0).(func() network.ValidatorsChecksum); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(network.ValidatorsChecksum)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
