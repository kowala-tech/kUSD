// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package protocolbuffer is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	RegisterRequest
	UnregisterRequest
	RegisterReply
	UnregisterReply
	GetTransactionsRequest
	GetTransactionsReply
	Transaction
*/
package protocolbuffer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RegisterRequest struct {
	Wallet string `protobuf:"bytes,1,opt,name=wallet" json:"wallet,omitempty"`
	Email  string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RegisterRequest) GetWallet() string {
	if m != nil {
		return m.Wallet
	}
	return ""
}

func (m *RegisterRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type UnregisterRequest struct {
	Wallet string `protobuf:"bytes,1,opt,name=wallet" json:"wallet,omitempty"`
}

func (m *UnregisterRequest) Reset()                    { *m = UnregisterRequest{} }
func (m *UnregisterRequest) String() string            { return proto.CompactTextString(m) }
func (*UnregisterRequest) ProtoMessage()               {}
func (*UnregisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UnregisterRequest) GetWallet() string {
	if m != nil {
		return m.Wallet
	}
	return ""
}

type RegisterReply struct {
}

func (m *RegisterReply) Reset()                    { *m = RegisterReply{} }
func (m *RegisterReply) String() string            { return proto.CompactTextString(m) }
func (*RegisterReply) ProtoMessage()               {}
func (*RegisterReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type UnregisterReply struct {
}

func (m *UnregisterReply) Reset()                    { *m = UnregisterReply{} }
func (m *UnregisterReply) String() string            { return proto.CompactTextString(m) }
func (*UnregisterReply) ProtoMessage()               {}
func (*UnregisterReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type GetTransactionsRequest struct {
	Account string `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
}

func (m *GetTransactionsRequest) Reset()                    { *m = GetTransactionsRequest{} }
func (m *GetTransactionsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTransactionsRequest) ProtoMessage()               {}
func (*GetTransactionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetTransactionsRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

type GetTransactionsReply struct {
	Transactions []*Transaction `protobuf:"bytes,1,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *GetTransactionsReply) Reset()                    { *m = GetTransactionsReply{} }
func (m *GetTransactionsReply) String() string            { return proto.CompactTextString(m) }
func (*GetTransactionsReply) ProtoMessage()               {}
func (*GetTransactionsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetTransactionsReply) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type Transaction struct {
	To          string `protobuf:"bytes,1,opt,name=to" json:"to,omitempty"`
	Amount      int64  `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	From        string `protobuf:"bytes,3,opt,name=from" json:"from,omitempty"`
	Hash        string `protobuf:"bytes,4,opt,name=hash" json:"hash,omitempty"`
	Timestamp   int64  `protobuf:"varint,5,opt,name=timestamp" json:"timestamp,omitempty"`
	BlockHeight int64  `protobuf:"varint,6,opt,name=block_height,json=blockHeight" json:"block_height,omitempty"`
	GasUsed     int64  `protobuf:"varint,7,opt,name=gas_used,json=gasUsed" json:"gas_used,omitempty"`
	GasPrice    int64  `protobuf:"varint,8,opt,name=gas_price,json=gasPrice" json:"gas_price,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Transaction) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *Transaction) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Transaction) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Transaction) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *Transaction) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Transaction) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *Transaction) GetGasUsed() int64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

func (m *Transaction) GetGasPrice() int64 {
	if m != nil {
		return m.GasPrice
	}
	return 0
}

func init() {
	proto.RegisterType((*RegisterRequest)(nil), "protocolbuffer.RegisterRequest")
	proto.RegisterType((*UnregisterRequest)(nil), "protocolbuffer.UnregisterRequest")
	proto.RegisterType((*RegisterReply)(nil), "protocolbuffer.RegisterReply")
	proto.RegisterType((*UnregisterReply)(nil), "protocolbuffer.UnregisterReply")
	proto.RegisterType((*GetTransactionsRequest)(nil), "protocolbuffer.GetTransactionsRequest")
	proto.RegisterType((*GetTransactionsReply)(nil), "protocolbuffer.GetTransactionsReply")
	proto.RegisterType((*Transaction)(nil), "protocolbuffer.Transaction")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EmailMapping service

type EmailMappingClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
	Unregister(ctx context.Context, in *UnregisterRequest, opts ...grpc.CallOption) (*UnregisterReply, error)
}

type emailMappingClient struct {
	cc *grpc.ClientConn
}

func NewEmailMappingClient(cc *grpc.ClientConn) EmailMappingClient {
	return &emailMappingClient{cc}
}

func (c *emailMappingClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := grpc.Invoke(ctx, "/protocolbuffer.EmailMapping/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailMappingClient) Unregister(ctx context.Context, in *UnregisterRequest, opts ...grpc.CallOption) (*UnregisterReply, error) {
	out := new(UnregisterReply)
	err := grpc.Invoke(ctx, "/protocolbuffer.EmailMapping/Unregister", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EmailMapping service

type EmailMappingServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
	Unregister(context.Context, *UnregisterRequest) (*UnregisterReply, error)
}

func RegisterEmailMappingServer(s *grpc.Server, srv EmailMappingServer) {
	s.RegisterService(&_EmailMapping_serviceDesc, srv)
}

func _EmailMapping_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailMappingServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocolbuffer.EmailMapping/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailMappingServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailMapping_Unregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailMappingServer).Unregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocolbuffer.EmailMapping/Unregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailMappingServer).Unregister(ctx, req.(*UnregisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EmailMapping_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocolbuffer.EmailMapping",
	HandlerType: (*EmailMappingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _EmailMapping_Register_Handler,
		},
		{
			MethodName: "Unregister",
			Handler:    _EmailMapping_Unregister_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// Client API for TransactionService service

type TransactionServiceClient interface {
	GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*GetTransactionsReply, error)
}

type transactionServiceClient struct {
	cc *grpc.ClientConn
}

func NewTransactionServiceClient(cc *grpc.ClientConn) TransactionServiceClient {
	return &transactionServiceClient{cc}
}

func (c *transactionServiceClient) GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*GetTransactionsReply, error) {
	out := new(GetTransactionsReply)
	err := grpc.Invoke(ctx, "/protocolbuffer.TransactionService/GetTransactions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TransactionService service

type TransactionServiceServer interface {
	GetTransactions(context.Context, *GetTransactionsRequest) (*GetTransactionsReply, error)
}

func RegisterTransactionServiceServer(s *grpc.Server, srv TransactionServiceServer) {
	s.RegisterService(&_TransactionService_serviceDesc, srv)
}

func _TransactionService_GetTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocolbuffer.TransactionService/GetTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetTransactions(ctx, req.(*GetTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TransactionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocolbuffer.TransactionService",
	HandlerType: (*TransactionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTransactions",
			Handler:    _TransactionService_GetTransactions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x5d, 0x8f, 0xd2, 0x40,
	0x14, 0xb5, 0xb0, 0x0b, 0xf4, 0x82, 0xdb, 0xec, 0xcd, 0x66, 0x33, 0xb2, 0x9a, 0x5d, 0x1a, 0x63,
	0x48, 0x4c, 0x78, 0xa8, 0x3f, 0x80, 0x27, 0xa3, 0x0f, 0x9a, 0x98, 0x2a, 0xf1, 0x91, 0x0c, 0x65,
	0x68, 0x27, 0xb6, 0x9d, 0x71, 0x66, 0x2a, 0xe1, 0x5f, 0xf9, 0x6b, 0xfc, 0x3d, 0x66, 0x06, 0x1a,
	0x4a, 0xf1, 0x63, 0x9f, 0x98, 0x73, 0xee, 0xb9, 0xe7, 0xd2, 0x7b, 0x2e, 0xf8, 0x54, 0xf2, 0x99,
	0x54, 0xc2, 0x08, 0xbc, 0x72, 0x3f, 0x89, 0xc8, 0x57, 0xd5, 0x66, 0xc3, 0x54, 0x38, 0x87, 0x20,
	0x66, 0x29, 0xd7, 0x86, 0xa9, 0x98, 0x7d, 0xaf, 0x98, 0x36, 0x78, 0x0b, 0xbd, 0x2d, 0xcd, 0x73,
	0x66, 0x88, 0xf7, 0xe0, 0x4d, 0xfd, 0xf8, 0x80, 0xf0, 0x06, 0x2e, 0x59, 0x41, 0x79, 0x4e, 0x3a,
	0x8e, 0xde, 0x83, 0xf0, 0x35, 0x5c, 0x2f, 0x4a, 0xf5, 0x38, 0x8b, 0x30, 0x80, 0xa7, 0xc7, 0x69,
	0x32, 0xdf, 0x85, 0xd7, 0x10, 0x34, 0xbb, 0x2d, 0x15, 0xc1, 0xed, 0x3b, 0x66, 0xbe, 0x28, 0x5a,
	0x6a, 0x9a, 0x18, 0x2e, 0x4a, 0x5d, 0xbb, 0x12, 0xe8, 0xd3, 0x24, 0x11, 0x55, 0x59, 0xdb, 0xd6,
	0x30, 0xfc, 0x0a, 0x37, 0x67, 0x3d, 0x32, 0xdf, 0xe1, 0x1c, 0x46, 0xa6, 0x41, 0x12, 0xef, 0xa1,
	0x3b, 0x1d, 0x46, 0x77, 0xb3, 0xd3, 0x25, 0xcc, 0x1a, 0x8d, 0xf1, 0x49, 0x43, 0xf8, 0xcb, 0x83,
	0x61, 0xa3, 0x8a, 0x57, 0xd0, 0x31, 0xe2, 0x30, 0xbd, 0x63, 0x84, 0xfd, 0x50, 0x5a, 0xb8, 0x7f,
	0x64, 0x97, 0xd2, 0x8d, 0x0f, 0x08, 0x11, 0x2e, 0x36, 0x4a, 0x14, 0xa4, 0xeb, 0x94, 0xee, 0x6d,
	0xb9, 0x8c, 0xea, 0x8c, 0x5c, 0xec, 0x39, 0xfb, 0xc6, 0xe7, 0xe0, 0x1b, 0x5e, 0x30, 0x6d, 0x68,
	0x21, 0xc9, 0xa5, 0xb3, 0x38, 0x12, 0x38, 0x81, 0xd1, 0x2a, 0x17, 0xc9, 0xb7, 0x65, 0xc6, 0x78,
	0x9a, 0x19, 0xd2, 0x73, 0x82, 0xa1, 0xe3, 0xde, 0x3b, 0x0a, 0x9f, 0xc1, 0x20, 0xa5, 0x7a, 0x59,
	0x69, 0xb6, 0x26, 0x7d, 0x57, 0xee, 0xa7, 0x54, 0x2f, 0x34, 0x5b, 0xe3, 0x1d, 0xf8, 0xb6, 0x24,
	0x15, 0x4f, 0x18, 0x19, 0xb8, 0x9a, 0xd5, 0x7e, 0xb2, 0x38, 0xfa, 0xe9, 0xc1, 0xe8, 0xad, 0x0d,
	0xf0, 0x23, 0x95, 0x92, 0x97, 0x29, 0x7e, 0x80, 0x41, 0x1d, 0x0d, 0xde, 0xb7, 0x17, 0xd4, 0x3a,
	0x91, 0xf1, 0x8b, 0xbf, 0x0b, 0x6c, 0x84, 0x4f, 0x30, 0x06, 0x38, 0xe6, 0x8a, 0x93, 0xb6, 0xfc,
	0xec, 0x62, 0xc6, 0xf7, 0xff, 0x92, 0x38, 0xcf, 0x68, 0x0b, 0xd8, 0x88, 0xe2, 0x33, 0x53, 0x3f,
	0x78, 0xc2, 0x90, 0x42, 0xd0, 0x8a, 0x1e, 0x5f, 0xb5, 0xbd, 0xfe, 0x7c, 0x4f, 0xe3, 0x97, 0xff,
	0xd5, 0xb9, 0xc1, 0xab, 0x9e, 0x93, 0xbd, 0xf9, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x53, 0xf2, 0x8d,
	0xc8, 0x47, 0x03, 0x00, 0x00,
}
